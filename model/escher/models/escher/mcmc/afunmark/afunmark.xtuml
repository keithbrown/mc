-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	"d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'afunmark',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("240d1b9c-259c-4584-b871-c629310c020d",
	112,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'escher::mcmc::afunmark');
INSERT INTO DIM_DIA
	VALUES ("240d1b9c-259c-4584-b871-c629310c020d",
	'',
	1.000000,
	4000.000000,
	3000.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("4683c530-621d-4871-a652-93cc26875fa0",
	"00000000-0000-0000-0000-000000000000",
	'WireSynchServiceOoaBridge',
	'',
	'//============================================================================
// $RCSfile: m.bridge.arc,v $
//
// Description:
// This archetype file contains the implementation functions for colors
// specified in the (user supplied/modified) bridge.clr file.
//============================================================================
//
//============================================================================
initiant = param.initiant;
ee_key_letters = param.ee_key_letters;
recipient = param.recipient;
T::print(s:"Note:  WireSynchServiceOoaBridge is no longer supported.  Use components and interfaces.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("e6740dc5-cabb-4fb1-b8c2-a41ef7cb7b41",
	"4683c530-621d-4871-a652-93cc26875fa0",
	'initiant',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("e9ada755-1a3d-40bf-9911-14146dfca09b",
	"4683c530-621d-4871-a652-93cc26875fa0",
	'ee_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"e6740dc5-cabb-4fb1-b8c2-a41ef7cb7b41",
	'');
INSERT INTO S_SPARM
	VALUES ("f949085d-699b-416d-910c-4e85cb139cc4",
	"4683c530-621d-4871-a652-93cc26875fa0",
	'recipient',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"e9ada755-1a3d-40bf-9911-14146dfca09b",
	'');
INSERT INTO PE_PE
	VALUES ("4683c530-621d-4871-a652-93cc26875fa0",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d1791da8-79a4-4b00-90e3-fb2ecadf61b6",
	"00000000-0000-0000-0000-000000000000",
	'WireRealizeExternalEntity',
	'',
	'//
//============================================================================
a = param.a;
b = param.b;
c = param.c;
d = param.d;
e = param.e;
T::print(s:"Note:  WireRealizeExternalEntity is no longer supported.  Use components and interfaces.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("43710539-1d59-4504-9e60-984c4b3d50dd",
	"d1791da8-79a4-4b00-90e3-fb2ecadf61b6",
	'a',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("bd5bfd46-1972-41e4-8558-9f34840acea9",
	"d1791da8-79a4-4b00-90e3-fb2ecadf61b6",
	'b',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"43710539-1d59-4504-9e60-984c4b3d50dd",
	'');
INSERT INTO S_SPARM
	VALUES ("bb0d6033-4e74-4c02-a142-a1fe84db7ae3",
	"d1791da8-79a4-4b00-90e3-fb2ecadf61b6",
	'c',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"bd5bfd46-1972-41e4-8558-9f34840acea9",
	'');
INSERT INTO S_SPARM
	VALUES ("5e847abd-c49a-4f9d-bd80-f4add714e397",
	"d1791da8-79a4-4b00-90e3-fb2ecadf61b6",
	'd',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"bb0d6033-4e74-4c02-a142-a1fe84db7ae3",
	'');
INSERT INTO S_SPARM
	VALUES ("15c06604-07e5-421d-93dc-b3ad13f7d6c3",
	"d1791da8-79a4-4b00-90e3-fb2ecadf61b6",
	'e',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"5e847abd-c49a-4f9d-bd80-f4add714e397",
	'');
INSERT INTO PE_PE
	VALUES ("d1791da8-79a4-4b00-90e3-fb2ecadf61b6",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("277e2adc-9a5e-4c35-9d60-de8f6fa79636",
	"00000000-0000-0000-0000-000000000000",
	'WireRealizedExternalEntity',
	'',
	'//
//============================================================================
a = param.a;
b = param.b;
c = param.c;
d = param.d;
e = param.e;
T::print(s:"Note:  WireRealizeExternalEntity is no longer supported.  Use components and interfaces.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("282edc33-d4b8-4ef3-a985-2ed3ef314d20",
	"277e2adc-9a5e-4c35-9d60-de8f6fa79636",
	'a',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("5958d329-443b-4bbb-b6a9-cee1691c1b2c",
	"277e2adc-9a5e-4c35-9d60-de8f6fa79636",
	'b',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"282edc33-d4b8-4ef3-a985-2ed3ef314d20",
	'');
INSERT INTO S_SPARM
	VALUES ("f0af5afb-06dd-496a-9a19-961ceb08fbbb",
	"277e2adc-9a5e-4c35-9d60-de8f6fa79636",
	'c',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"5958d329-443b-4bbb-b6a9-cee1691c1b2c",
	'');
INSERT INTO S_SPARM
	VALUES ("fdc7bb49-1aee-4002-8f55-462739b2ca78",
	"277e2adc-9a5e-4c35-9d60-de8f6fa79636",
	'd',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f0af5afb-06dd-496a-9a19-961ceb08fbbb",
	'');
INSERT INTO S_SPARM
	VALUES ("3dfb33ba-44f1-4f93-8081-e15df22220f3",
	"277e2adc-9a5e-4c35-9d60-de8f6fa79636",
	'e',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"fdc7bb49-1aee-4002-8f55-462739b2ca78",
	'');
INSERT INTO PE_PE
	VALUES ("277e2adc-9a5e-4c35-9d60-de8f6fa79636",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9cbb5174-130e-4cc3-ba23-6baa68aaf99b",
	"00000000-0000-0000-0000-000000000000",
	'TagSyncServiceSafeForInterrupts',
	'',
	'//
//
//============================================================================
// Mark a function (synchronous service) as being safe for 
// interrupt service routine (ISR) invocation.  This is also useful
// for task communication and other multi-context situations.
//============================================================================
component_name = param.component_name;
function_name = param.function_name;
component_name = T::r(s:component_name);
select any tm_sync from instances of TM_SYNC where ( ( selected.RegisteredDomain == component_name ) and ( selected.Name == function_name ) );
if ( empty tm_sync )
  create object instance tm_sync of TM_SYNC;
  tm_sync.RegisteredDomain = component_name;
  tm_sync.Name = function_name;
end if;
tm_sync.IsSafeForInterrupts = true;
T::print(s:"Function ${function_name} in component ${component_name} marked as safe for interrupt invocation.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("e15a5cf3-16b7-40c0-bd14-565499be33a7",
	"9cbb5174-130e-4cc3-ba23-6baa68aaf99b",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("e2c206d8-db66-46dd-b02e-3c85bd7248cd",
	"9cbb5174-130e-4cc3-ba23-6baa68aaf99b",
	'function_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"e15a5cf3-16b7-40c0-bd14-565499be33a7",
	'');
INSERT INTO PE_PE
	VALUES ("9cbb5174-130e-4cc3-ba23-6baa68aaf99b",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("51e7041b-a9ae-41aa-bcd5-9a7a310695d4",
	"00000000-0000-0000-0000-000000000000",
	'MarkMessageSafeForInterrupts',
	'',
	'//
//
//============================================================================
// Mark a message as safe for interrupt service routine (ISR) invocation.
// This is also useful for task communication and multi-context execution.
//============================================================================
component_name = param.component_name;
port_name = param.port_name;
message_name = param.message_name;
component_name = T::r(s:component_name);
port_name = T::r(s:port_name);
message_name = T::r(s:message_name);
select any tm_msg from instances of TM_MSG where ( ( selected.ComponentName == component_name ) and ( selected.PortName == port_name ) and ( selected.MessageName == message_name ) );
if ( empty tm_msg )
  create object instance tm_msg of TM_MSG;
  tm_msg.ComponentName = component_name;
  tm_msg.PortName = port_name;
  tm_msg.MessageName = message_name;
end if;
tm_msg.IsSafeForInterrupts = true;
T::print(s:"Message ${message_name} in component ${component_name} on port ${port_name} marked as safe for interrupt invocation.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("6655207b-c796-4a3b-a8c8-2a2b45ff367d",
	"51e7041b-a9ae-41aa-bcd5-9a7a310695d4",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("c70faad7-20de-4929-a07a-e23a8b7a337b",
	"51e7041b-a9ae-41aa-bcd5-9a7a310695d4",
	'port_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"6655207b-c796-4a3b-a8c8-2a2b45ff367d",
	'');
INSERT INTO S_SPARM
	VALUES ("a46ba796-303b-4e98-bbdc-53c145374ea3",
	"51e7041b-a9ae-41aa-bcd5-9a7a310695d4",
	'message_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"c70faad7-20de-4929-a07a-e23a8b7a337b",
	'');
INSERT INTO PE_PE
	VALUES ("51e7041b-a9ae-41aa-bcd5-9a7a310695d4",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3b9cf7f6-2615-49e5-8432-329e5b13c64f",
	"00000000-0000-0000-0000-000000000000",
	'TagSystemObjectDefaultExtentSize',
	'',
	'//============================================================================
// $RCSfile: m.class.arc,v $
//
// Description:
// This archetype file contains the implementation functions for colors
// specified in the (user supplied/modified) object.clr file.
//============================================================================
//
//============================================================================
// Set default extension for entire component.
//============================================================================
extent_size = param.extent_size;
::MarkSystemObjectDefaultExtentSize( extent_size:extent_size );
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("39552b4c-5b26-4d04-9a09-cfc02dfcd655",
	"3b9cf7f6-2615-49e5-8432-329e5b13c64f",
	'extent_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("3b9cf7f6-2615-49e5-8432-329e5b13c64f",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a4fad1f0-2bd2-4bf9-9022-9bb2cebd91f4",
	"00000000-0000-0000-0000-000000000000",
	'MarkSystemObjectDefaultExtentSize',
	'',
	'extent_size = param.extent_size;
select many te_classes from instances of TE_CLASS;
for each te_class in te_classes
  te_class.MaxExtentSize = extent_size;
end for;
T::print(s:"Class default extent size is $t{extent_size} for _all_ classes.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("af55c0a2-5a0e-4377-a8d3-303223b72a60",
	"a4fad1f0-2bd2-4bf9-9022-9bb2cebd91f4",
	'extent_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("a4fad1f0-2bd2-4bf9-9022-9bb2cebd91f4",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("44825f5b-e1ce-433d-8480-67c3cc4ef267",
	"00000000-0000-0000-0000-000000000000",
	'TagObjectExtentSize',
	'',
	'//
//============================================================================
obj_key_letters = param.obj_key_letters;
extent_size = param.extent_size;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkObjectExtentSize( component_name:te_c.Name, obj_key_letters:obj_key_letters, extent_size:extent_size );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("3e5bc125-f0ae-4343-a7ce-2ec703cd0c88",
	"44825f5b-e1ce-433d-8480-67c3cc4ef267",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("148f4066-5c48-48dd-9b5c-55c9322885ec",
	"44825f5b-e1ce-433d-8480-67c3cc4ef267",
	'extent_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"3e5bc125-f0ae-4343-a7ce-2ec703cd0c88",
	'');
INSERT INTO PE_PE
	VALUES ("44825f5b-e1ce-433d-8480-67c3cc4ef267",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2981d25b-aced-4c35-98b4-c09d5ab34c8a",
	"00000000-0000-0000-0000-000000000000",
	'MarkObjectExtentSize',
	'',
	'component_name = param.component_name;
obj_key_letters = param.obj_key_letters;
extent_size = param.extent_size;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  select any te_class related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  if ( not_empty te_class )
    te_class.MaxExtentSize = extent_size;
    T::print(s:"Class ''${te_class.Name}'' (${te_class.Key_Lett}) extent size is $t{extent_size}");
  else
    T::print(s:"ERROR:  Class (${obj_key_letters}) not found in component ''${te_c.Name}''.");
    T::print(s:"      => MarkObjectExtentSize( ${obj_key_letters}, $t{extent_size} )");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("49edcf86-9466-4283-a868-0d841a8adbae",
	"2981d25b-aced-4c35-98b4-c09d5ab34c8a",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("b2c4e170-dc8e-415b-a630-9ed27420862a",
	"2981d25b-aced-4c35-98b4-c09d5ab34c8a",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"49edcf86-9466-4283-a868-0d841a8adbae",
	'');
INSERT INTO S_SPARM
	VALUES ("8e5ba9c7-9f3f-4cfd-ac8d-9108bd5cef66",
	"2981d25b-aced-4c35-98b4-c09d5ab34c8a",
	'extent_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"b2c4e170-dc8e-415b-a630-9ed27420862a",
	'');
INSERT INTO PE_PE
	VALUES ("2981d25b-aced-4c35-98b4-c09d5ab34c8a",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b6a57333-5238-4b84-8979-ab4a2860d4fc",
	"00000000-0000-0000-0000-000000000000",
	'TagTransformerGeneration',
	'',
	'//
//============================================================================
// This function was used in previous versions of MC-3020 to enable
// the generation of code from actions in transformers (operations).
// This function is deprecated in favor of translating operations by
// default.  Translation may be disabled with MarkClassOperationTranslationOff.
//============================================================================
obj_key_letters = param.obj_key_letters;
transformer_name = param.transformer_name;
T::print(s:"Note:  TagTransformerGeneration is no longer used.  Please use");
T::print(s:"MarkClassOperationTranslationOff to control semantic translation.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("b3c4a0ae-f252-4def-b5d5-fa1278323db2",
	"b6a57333-5238-4b84-8979-ab4a2860d4fc",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("0f92775e-8abf-40e2-b282-76b9bb81cb81",
	"b6a57333-5238-4b84-8979-ab4a2860d4fc",
	'transformer_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"b3c4a0ae-f252-4def-b5d5-fa1278323db2",
	'');
INSERT INTO PE_PE
	VALUES ("b6a57333-5238-4b84-8979-ab4a2860d4fc",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ec88405f-41b6-4b5d-b56a-7324f82457e0",
	"00000000-0000-0000-0000-000000000000",
	'TagClassOperationTranslationOff',
	'',
	'//
//============================================================================
// Disable the translation of class operation processing semantics.
// The default is for all operations to be translated.
//============================================================================
obj_key_letters = param.obj_key_letters;
op_name = param.op_name;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkClassOperationTranslationOff( component_name:te_c.Name, obj_key_letters:obj_key_letters, op_name:op_name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("6ec7a8dc-47a6-4e6e-9797-e51f0cdad697",
	"ec88405f-41b6-4b5d-b56a-7324f82457e0",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("e5a5c196-f4e6-468b-b62b-80fd87fa8686",
	"ec88405f-41b6-4b5d-b56a-7324f82457e0",
	'op_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"6ec7a8dc-47a6-4e6e-9797-e51f0cdad697",
	'');
INSERT INTO PE_PE
	VALUES ("ec88405f-41b6-4b5d-b56a-7324f82457e0",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5d9b4ffb-b771-420d-9e3f-7ff2e5e76395",
	"00000000-0000-0000-0000-000000000000",
	'MarkClassOperationTranslationOff',
	'',
	'component_name = param.component_name;
obj_key_letters = param.obj_key_letters;
op_name = param.op_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  if ( "*" == obj_key_letters )
    select many te_classes related by te_c->TE_CLASS[R2064];
  else
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  end if;
  if ( empty te_classes )
    msg = "ERROR:  Class ${obj_key_letters} not found in component.";
    msg = msg + "\n => MarkClassOperationTranslationOff( ${obj_key_letters}, ${op_name} )";
  end if;
  for each te_class in te_classes
    if ( "*" == op_name )
      select many te_tfrs related by te_class->O_OBJ[R2019]->O_TFR[R115]->TE_TFR[R2024];
      if ( not_empty te_tfrs )
        for each te_tfr in te_tfrs
          te_tfr.XlateSemantics = false;
        end for;
        msg = "Class ${te_class.Name} (${te_class.Key_Lett}) all operation semantics disabled.";
      end if;
    else
      select any o_tfr related by te_class->O_OBJ[R2019]->O_TFR[R115] where ( selected.Name == op_name );
      if ( not_empty o_tfr )
        select one te_tfr related by o_tfr->TE_TFR[R2024];
        te_tfr.XlateSemantics = false;
        msg = "Class Operation ${te_class.Name} ${te_class.Key_Lett}::${te_tfr.Name} semantics disabled.";
      else
        msg = "ERROR:  Class Operation ${te_class.Name} ${te_class.Key_Lett}::${op_name} is not defined.";
        msg = msg + "\n  => MarkClassOperationTranslationOff( ${obj_key_letters}, ${op_name} )";
      end if;
    end if;
  end for;
  if ( msg != "" )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("ec935982-ced5-485a-8012-85da37ae8b5a",
	"5d9b4ffb-b771-420d-9e3f-7ff2e5e76395",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("4ec07c0c-f170-4a04-bd58-a1e04fb845c2",
	"5d9b4ffb-b771-420d-9e3f-7ff2e5e76395",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ec935982-ced5-485a-8012-85da37ae8b5a",
	'');
INSERT INTO S_SPARM
	VALUES ("23a70e14-fc71-440c-bd27-0912142907c5",
	"5d9b4ffb-b771-420d-9e3f-7ff2e5e76395",
	'op_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"4ec07c0c-f170-4a04-bd58-a1e04fb845c2",
	'');
INSERT INTO PE_PE
	VALUES ("5d9b4ffb-b771-420d-9e3f-7ff2e5e76395",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("1ec1a826-32e2-4340-a00e-e601c7da0265",
	"00000000-0000-0000-0000-000000000000",
	'MarkClassTraceOff',
	'',
	'//
//============================================================================
component_name = param.component_name;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  select many te_abas related by te_c->TE_ABA[R2088] where ( false );
  if ( "*" == obj_key_letters )
    select many te_classs related by te_c->TE_CLASS[R2064];
    for each te_class in te_classs
      te_class.IsTrace = false;
    end for;
    select many te_abas related by te_classs->O_OBJ[R2019]->O_TFR[R115]->TE_TFR[R2024]->TE_ABA[R2010];
    select many more_te_abas related by te_classs->O_OBJ[R2019]->O_ATTR[R102]->O_BATTR[R106]->O_DBATTR[R107]->TE_DBATTR[R2026]->TE_ABA[R2010];
    te_abas = te_abas | more_te_abas;
    select many more_te_abas related by te_classs->TE_SM[R2072]->SM_SM[R2043]->SM_ACT[R515]->TE_ACT[R2022]->TE_ABA[R2010];
    te_abas = te_abas | more_te_abas;
    msg = "Class tracing for all is disabled in component ${te_c.Name}.";
  else
    select any te_class related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
    if ( not_empty te_class )
      te_class.IsTrace = false;
      msg = "Class ${te_class.Name} (${te_class.Key_Lett}) tracing is disabled.";
      select many te_abas related by te_class->O_OBJ[R2019]->O_TFR[R115]->TE_TFR[R2024]->TE_ABA[R2010];
      select many more_te_abas related by te_class->O_OBJ[R2019]->O_ATTR[R102]->O_BATTR[R106]->O_DBATTR[R107]->TE_DBATTR[R2026]->TE_ABA[R2010];
      te_abas = te_abas | more_te_abas;
      select many more_te_abas related by te_class->TE_SM[R2072]->SM_SM[R2043]->SM_ACT[R515]->TE_ACT[R2022]->TE_ABA[R2010];
      te_abas = te_abas | more_te_abas;
    else
      msg = "ERROR:  Class (${obj_key_letters}) not found in component ${te_c.Name}.";
      msg = msg + "\n => MarkClassTraceOff( ${component_name}, ${obj_key_letters} )";
    end if;
  end if;
  for each te_aba in te_abas
    te_aba.IsTrace = false;
  end for;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("0ff84517-2c35-4b74-be93-0ac6698ebb05",
	"1ec1a826-32e2-4340-a00e-e601c7da0265",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("cb08ca9a-4ba5-4a6c-a51f-2d205ba741bc",
	"1ec1a826-32e2-4340-a00e-e601c7da0265",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"0ff84517-2c35-4b74-be93-0ac6698ebb05",
	'');
INSERT INTO PE_PE
	VALUES ("1ec1a826-32e2-4340-a00e-e601c7da0265",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d319af55-40bb-444e-b261-f7494bed3a34",
	"00000000-0000-0000-0000-000000000000",
	'MarkClassTraceOn',
	'',
	'//
//============================================================================
component_name = param.component_name;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  select many te_abas related by te_c->TE_ABA[R2088] where ( false );
  if ( "*" == obj_key_letters )
    select many te_classs related by te_c->TE_CLASS[R2064];
    for each te_class in te_classs
      te_class.IsTrace = true;
    end for;
    select many te_abas related by te_classs->O_OBJ[R2019]->O_TFR[R115]->TE_TFR[R2024]->TE_ABA[R2010];
    select many more_te_abas related by te_classs->O_OBJ[R2019]->O_ATTR[R102]->O_BATTR[R106]->O_DBATTR[R107]->TE_DBATTR[R2026]->TE_ABA[R2010];
    te_abas = te_abas | more_te_abas;
    select many more_te_abas related by te_classs->TE_SM[R2072]->SM_SM[R2043]->SM_ACT[R515]->TE_ACT[R2022]->TE_ABA[R2010];
    te_abas = te_abas | more_te_abas;
    msg = "Class tracing for all is enabled in component ${te_c.Name}.";
  else
    select any te_class related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
    if ( not_empty te_class )
      te_class.IsTrace = true;
      msg = "Class ${te_class.Name} (${te_class.Key_Lett}) tracing is enabled.";
      select many te_abas related by te_class->O_OBJ[R2019]->O_TFR[R115]->TE_TFR[R2024]->TE_ABA[R2010];
      select many more_te_abas related by te_class->O_OBJ[R2019]->O_ATTR[R102]->O_BATTR[R106]->O_DBATTR[R107]->TE_DBATTR[R2026]->TE_ABA[R2010];
      te_abas = te_abas | more_te_abas;
      select many more_te_abas related by te_class->TE_SM[R2072]->SM_SM[R2043]->SM_ACT[R515]->TE_ACT[R2022]->TE_ABA[R2010];
      te_abas = te_abas | more_te_abas;
    else
      msg = "ERROR:  Class (${obj_key_letters}) not found in component ${te_c.Name}.";
      msg = msg + "\n => MarkClassTraceOn( ${component_name}, ${obj_key_letters} )";
    end if;
  end if;
  for each te_aba in te_abas
    te_aba.IsTrace = true;
  end for;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("b7e22146-d355-454a-8f14-f81228b362d7",
	"d319af55-40bb-444e-b261-f7494bed3a34",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("8ccd79ac-1ec3-4425-859e-1d1b59eacf72",
	"d319af55-40bb-444e-b261-f7494bed3a34",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"b7e22146-d355-454a-8f14-f81228b362d7",
	'');
INSERT INTO PE_PE
	VALUES ("d319af55-40bb-444e-b261-f7494bed3a34",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("38b3feff-c341-4f38-8ecb-e3f9456bf227",
	"00000000-0000-0000-0000-000000000000",
	'TagPEIsDefinedInData',
	'',
	'//
//============================================================================
// Identify this class as having preexisting instances defined
// in data.
//============================================================================
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkPEIsDefinedInData( component_name:te_c.Name, package_name:ss_prefix, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("5d9cff6c-cd72-4249-9944-c24f495c5134",
	"38b3feff-c341-4f38-8ecb-e3f9456bf227",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("0b20029c-7128-4ae5-9b52-6722bd9ea7b6",
	"38b3feff-c341-4f38-8ecb-e3f9456bf227",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"5d9cff6c-cd72-4249-9944-c24f495c5134",
	'');
INSERT INTO PE_PE
	VALUES ("38b3feff-c341-4f38-8ecb-e3f9456bf227",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f3e710f0-3432-4f62-b107-74d8665690ab",
	"00000000-0000-0000-0000-000000000000",
	'MarkPEIsDefinedInData',
	'',
	'component_name = param.component_name;
package_name = param.package_name;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  // Get set into scope.
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  // Check for an explicit object.
  // Check for an explicit package.
  // Check a star in the package and component.
  // Otherwise, generate a coloring error.
  if ( ( "*" == package_name ) and ( "*" == obj_key_letters ) )
    select many te_classes related by te_c->TE_CLASS[R2064];
  elif ( "" == package_name )
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  elif ( "*" == obj_key_letters )
    select many ep_pkgs related by te_c->C_C[R2054]->PE_PE[R8003]->EP_PKG[R8001]->PE_PE[R8000]->EP_PKG[R8001] where ( selected.Name == package_name );
    select many te_classes related by ep_pkgs->PE_PE[R8000]->O_OBJ[R8001]->TE_CLASS[R2019];
  else
    msg = msg + "ERROR:  MarkPEIsDefinedInData( ${package_name}, ${obj_key_letters} ) in component ${te_c.Name}\n";
  end if;
  for each te_class in te_classes
    te_class.PEIsDefinedInData = true;
    msg = msg + "Class ${te_class.Name} (${te_class.Key_Lett}) in component ${te_c.Name} marked to enable PEIs in data.\n";
  end for;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("b1b4d6bf-c8a6-4466-a4c0-e7908218e354",
	"f3e710f0-3432-4f62-b107-74d8665690ab",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("40e02599-24b2-4b37-9db2-15e4cd8db145",
	"f3e710f0-3432-4f62-b107-74d8665690ab",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"b1b4d6bf-c8a6-4466-a4c0-e7908218e354",
	'');
INSERT INTO S_SPARM
	VALUES ("227b7af8-5787-4777-b0af-a9532ab4ea2c",
	"f3e710f0-3432-4f62-b107-74d8665690ab",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"40e02599-24b2-4b37-9db2-15e4cd8db145",
	'');
INSERT INTO PE_PE
	VALUES ("f3e710f0-3432-4f62-b107-74d8665690ab",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9d5d2e35-560b-4bc1-bc86-51f09520ba61",
	"00000000-0000-0000-0000-000000000000",
	'TagStaticInstancePopulation',
	'',
	'//
//============================================================================
// Identify this class as having a static instance population.
// That is, after initialization is complete, instances are neither
// created nor destroyed.
//============================================================================
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkStaticInstancePopulation( component_name:te_c.Name, package_name:ss_prefix, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("c6a8be57-cac8-47b1-9910-3181189975e6",
	"9d5d2e35-560b-4bc1-bc86-51f09520ba61",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("a16f31ca-b9ad-4ae8-afa6-8a6796e0ae70",
	"9d5d2e35-560b-4bc1-bc86-51f09520ba61",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"c6a8be57-cac8-47b1-9910-3181189975e6",
	'');
INSERT INTO PE_PE
	VALUES ("9d5d2e35-560b-4bc1-bc86-51f09520ba61",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a6b431cc-822c-4b93-99db-5230ae6cbeba",
	"00000000-0000-0000-0000-000000000000",
	'MarkStaticInstancePopulation',
	'',
	'component_name = param.component_name;
package_name = param.package_name;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  // Get set into scope.
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  // Check for an explicit object.
  // Check for an explicit package.
  // Check a star in the package and component.
  // Otherwise, generate a coloring error.
  if ( ( "*" == package_name ) and ( "*" == obj_key_letters ) )
    select many te_classes related by te_c->TE_CLASS[R2064];
  elif ( "" == package_name )
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  elif ( "*" == obj_key_letters )
    select many ep_pkgs related by te_c->C_C[R2054]->PE_PE[R8003]->EP_PKG[R8001]->PE_PE[R8000]->EP_PKG[R8001] where ( selected.Name == package_name );
    select many te_classes related by ep_pkgs->PE_PE[R8000]->O_OBJ[R8001]->TE_CLASS[R2019];
  else
    msg = msg + "ERROR:  MarkStaticInstancePopulation( ${package_name}, ${obj_key_letters} ) in component ${te_c.Name}\n";
  end if;
  for each te_class in te_classes
    te_class.IsFixedPopulation = true;
    msg = msg + "Class ${te_class.Name} (${te_class.Key_Lett}) in component ${te_c.Name} marked as\n";
    msg = msg + "as having a static instance population.\n";
  end for;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("1ba4b25c-ab1f-467e-bf49-3690b70c01f3",
	"a6b431cc-822c-4b93-99db-5230ae6cbeba",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("fce92016-798d-40e3-ada6-a21c6ca06414",
	"a6b431cc-822c-4b93-99db-5230ae6cbeba",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"1ba4b25c-ab1f-467e-bf49-3690b70c01f3",
	'');
INSERT INTO S_SPARM
	VALUES ("101ecc6f-1185-4e19-92ef-1196fb615509",
	"a6b431cc-822c-4b93-99db-5230ae6cbeba",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"fce92016-798d-40e3-ada6-a21c6ca06414",
	'');
INSERT INTO PE_PE
	VALUES ("a6b431cc-822c-4b93-99db-5230ae6cbeba",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a6fe07c7-e314-441b-8191-49fd404c4ebe",
	"00000000-0000-0000-0000-000000000000",
	'TagReadOnly',
	'',
	'//
//============================================================================
// Mark object as read only.
//============================================================================
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkReadOnly( component_name:te_c.Name, package_name:ss_prefix, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("da5dcb4b-10c5-4054-b1ef-fd82781784df",
	"a6fe07c7-e314-441b-8191-49fd404c4ebe",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("74eed857-0e49-4a00-ad06-84d813ec2dca",
	"a6fe07c7-e314-441b-8191-49fd404c4ebe",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"da5dcb4b-10c5-4054-b1ef-fd82781784df",
	'');
INSERT INTO PE_PE
	VALUES ("a6fe07c7-e314-441b-8191-49fd404c4ebe",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c81d31ff-9cb2-488a-8732-1b5a446547c1",
	"00000000-0000-0000-0000-000000000000",
	'MarkReadOnly',
	'',
	'component_name = param.component_name;
package_name = param.package_name;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  // Get set into scope.
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  // Check for an explicit object.
  // Check for an explicit package.
  // Check a star in the package and component.
  // Otherwise, generate a coloring error.
  if ( ( "*" == package_name ) and ( "*" == obj_key_letters ) )
    select many te_classes related by te_c->TE_CLASS[R2064];
  elif ( "" == package_name )
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  elif ( "*" == obj_key_letters )
    select many ep_pkgs related by te_c->C_C[R2054]->PE_PE[R8003]->EP_PKG[R8001]->PE_PE[R8000]->EP_PKG[R8001] where ( selected.Name == package_name );
    select many te_classes related by ep_pkgs->PE_PE[R8000]->O_OBJ[R8001]->TE_CLASS[R2019];
  else
    msg = msg + "ERROR:  MarkReadOnly( ${package_name}, ${obj_key_letters} ) in component ${te_c.Name}\n";
  end if;
  for each te_class in te_classes
    te_class.IsReadOnly = true;
    msg = msg + "Class ${te_class.Name} (${te_class.Key_Lett}) in component ${te_c.Name} marked as read only.\n";
  end for;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("9239022d-b410-47fe-af55-5d8564236a3f",
	"c81d31ff-9cb2-488a-8732-1b5a446547c1",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("21aebe06-3a4b-4966-9a8c-8de09cbb447a",
	"c81d31ff-9cb2-488a-8732-1b5a446547c1",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"9239022d-b410-47fe-af55-5d8564236a3f",
	'');
INSERT INTO S_SPARM
	VALUES ("b47b7581-e238-4970-8e2f-1f4a2c995871",
	"c81d31ff-9cb2-488a-8732-1b5a446547c1",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"21aebe06-3a4b-4966-9a8c-8de09cbb447a",
	'');
INSERT INTO PE_PE
	VALUES ("c81d31ff-9cb2-488a-8732-1b5a446547c1",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b3226812-96ab-4e8e-aad0-a20a49b1861a",
	"00000000-0000-0000-0000-000000000000",
	'TagPersistentClass',
	'',
	'//
//============================================================================
// Enable persistent storage of the specified class or classes.
//============================================================================
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkPersistentClass( component_name:te_c.Name, package_name:ss_prefix, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("d2c77474-1e41-471f-a3e1-9d8c44122e7b",
	"b3226812-96ab-4e8e-aad0-a20a49b1861a",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("6b8852ca-1551-45ba-9931-b21b8374cd85",
	"b3226812-96ab-4e8e-aad0-a20a49b1861a",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"d2c77474-1e41-471f-a3e1-9d8c44122e7b",
	'');
INSERT INTO PE_PE
	VALUES ("b3226812-96ab-4e8e-aad0-a20a49b1861a",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9910c0f1-f57c-4d30-a6fc-bf07f2bb716f",
	"00000000-0000-0000-0000-000000000000",
	'MarkPersistentClass',
	'',
	'component_name = param.component_name;
package_name = param.package_name;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  // Get set into scope.
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  // Check for an explicit object.
  // Check for an explicit package.
  // Check a star in the package and component.
  // Otherwise, generate a coloring error.
  if ( ( "*" == package_name ) and ( "*" == obj_key_letters ) )
    select many te_classes related by te_c->TE_CLASS[R2064];
  elif ( "" == package_name )
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  elif ( "*" == obj_key_letters )
    select many ep_pkgs related by te_c->C_C[R2054]->PE_PE[R8003]->EP_PKG[R8001]->PE_PE[R8000]->EP_PKG[R8001] where ( selected.Name == package_name );
    select many te_classes related by ep_pkgs->PE_PE[R8000]->O_OBJ[R8001]->TE_CLASS[R2019];
  else
    msg = msg + "ERROR:  MarkPersistentClass( ${package_name}, ${obj_key_letters} ) in component ${te_c.Name}\n";
  end if;
  for each te_class in te_classes
    te_class.Persistent = true;
    msg = msg + "Class ${te_class.Name} (${te_class.Key_Lett}) in component ${te_c.Name} marked as persistent.\n";
  end for;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("f353c821-d423-44ca-9a88-a9a8751cbeb0",
	"9910c0f1-f57c-4d30-a6fc-bf07f2bb716f",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("3ad52ec6-4b70-4d1a-98ba-fd958205b5c3",
	"9910c0f1-f57c-4d30-a6fc-bf07f2bb716f",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f353c821-d423-44ca-9a88-a9a8751cbeb0",
	'');
INSERT INTO S_SPARM
	VALUES ("c51a6178-273b-4185-aa62-32ccac536d9d",
	"9910c0f1-f57c-4d30-a6fc-bf07f2bb716f",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"3ad52ec6-4b70-4d1a-98ba-fd958205b5c3",
	'');
INSERT INTO PE_PE
	VALUES ("9910c0f1-f57c-4d30-a6fc-bf07f2bb716f",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b52c8989-50ad-40d2-85ef-623fe450a0c3",
	"00000000-0000-0000-0000-000000000000",
	'TagNonPersistentClass',
	'',
	'//
//============================================================================
// Disable persistent storage of the specified class or classes.
// This interface is meant to undo what the MarkPersistent interface
// does.  This way the user can tag all classes persistent and then
// unmark a few (rather than explicitly mark a whole bunch).
//============================================================================
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkNonPersistentClass( component_name:te_c.Name, package_name:ss_prefix, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("1de19b34-27e2-47a6-8720-5e162244d219",
	"b52c8989-50ad-40d2-85ef-623fe450a0c3",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("429265d2-9fa2-4039-afec-18d28065a8d1",
	"b52c8989-50ad-40d2-85ef-623fe450a0c3",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"1de19b34-27e2-47a6-8720-5e162244d219",
	'');
INSERT INTO PE_PE
	VALUES ("b52c8989-50ad-40d2-85ef-623fe450a0c3",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7668734e-00e3-4904-98a9-974a3a5f6b80",
	"00000000-0000-0000-0000-000000000000",
	'MarkNonPersistentClass',
	'',
	'component_name = param.component_name;
package_name = param.package_name;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  // Get set into scope.
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  // Check for an explicit object.
  // Check for an explicit package.
  // Check a star in the package and component.
  // Otherwise, generate a coloring error.
  if ( ( "*" == package_name ) and ( "*" == obj_key_letters ) )
    select many te_classes related by te_c->TE_CLASS[R2064];
  elif ( "" == package_name )
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  elif ( "*" == obj_key_letters )
    select many ep_pkgs related by te_c->C_C[R2054]->PE_PE[R8003]->EP_PKG[R8001]->PE_PE[R8000]->EP_PKG[R8001] where ( selected.Name == package_name );
    select many te_classes related by ep_pkgs->PE_PE[R8000]->O_OBJ[R8001]->TE_CLASS[R2019];
  else
    msg = msg + "ERROR:  MarkNonPersistentClass( ${package_name}, ${obj_key_letters} ) in component ${te_c.Name}\n";
  end if;
  for each te_class in te_classes
    te_class.Persistent = false;
    msg = msg + "Class ${te_class.Name} (${te_class.Key_Lett}) in component ${te_c.Name} marked as not persistent.\n";
  end for;
  if ( "" != msg )
    T::print(s:"${msg}");
  end if;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("91c879f0-beed-404a-b97b-b2f07aff4418",
	"7668734e-00e3-4904-98a9-974a3a5f6b80",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("ec74a3d7-2f9b-4e5f-bdb9-b02893a39937",
	"7668734e-00e3-4904-98a9-974a3a5f6b80",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"91c879f0-beed-404a-b97b-b2f07aff4418",
	'');
INSERT INTO S_SPARM
	VALUES ("214be711-d198-49af-9839-2ce3cb1b8298",
	"7668734e-00e3-4904-98a9-974a3a5f6b80",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ec74a3d7-2f9b-4e5f-bdb9-b02893a39937",
	'');
INSERT INTO PE_PE
	VALUES ("7668734e-00e3-4904-98a9-974a3a5f6b80",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3f1e1cd3-52de-4b94-b504-8f39d49220c6",
	"00000000-0000-0000-0000-000000000000",
	'MapClassToTask',
	'',
	'//
//============================================================================
// Map classes to tasks based upon user marking.  With this interface
// an individual class, package or component can be mapped to the
// specified task.
//============================================================================
ss_prefix = param.ss_prefix;
obj_key_letters = param.obj_key_letters;
task = param.task;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkClassToTask( component_name:te_c.Name, package_name:ss_prefix, obj_key_letters:obj_key_letters, task:task );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("ea44d9f3-e24a-4329-b6da-6d0456799f02",
	"3f1e1cd3-52de-4b94-b504-8f39d49220c6",
	'ss_prefix',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("3c6b2dea-3a2d-4cde-a4f4-21c8fa7ba2ad",
	"3f1e1cd3-52de-4b94-b504-8f39d49220c6",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ea44d9f3-e24a-4329-b6da-6d0456799f02",
	'');
INSERT INTO S_SPARM
	VALUES ("b64b2172-afa4-4671-b4c7-76f48230f50b",
	"3f1e1cd3-52de-4b94-b504-8f39d49220c6",
	'task',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"3c6b2dea-3a2d-4cde-a4f4-21c8fa7ba2ad",
	'');
INSERT INTO PE_PE
	VALUES ("3f1e1cd3-52de-4b94-b504-8f39d49220c6",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8e278f04-c7b5-4e56-b0bd-bb8a4e00932e",
	"00000000-0000-0000-0000-000000000000",
	'MarkClassToTask',
	'',
	'component_name = param.component_name;
package_name = param.package_name;
obj_key_letters = param.obj_key_letters;
task = param.task;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  // Get set into scope.
  select many te_classes related by te_c->TE_CLASS[R2064] where ( false );
  // Check for an explicit object.
  // Check for an explicit package.
  // Check a star in the package and component.
  // Otherwise, generate a coloring error.
  if ( ( "*" == package_name ) and ( "*" == obj_key_letters ) )
    select many te_classes related by te_c->TE_CLASS[R2064];
  elif ( "" == package_name )
    select many te_classes related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  elif ( "*" == obj_key_letters )
    select many ep_pkgs related by te_c->C_C[R2054]->PE_PE[R8003]->EP_PKG[R8001]->PE_PE[R8000]->EP_PKG[R8001] where ( selected.Name == package_name );
    select many te_classes related by ep_pkgs->PE_PE[R8000]->O_OBJ[R8001]->TE_CLASS[R2019];
  else
    T::print(s:"ERROR:  MapClassToTask( ${package_name}, ${obj_key_letters}, $t{task} ) in component ${te_c.Name}\n");
  end if;
  for each te_class in te_classes
    te_class.Task = task;
  end for;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("f50b82c2-1772-4d4c-9736-904728edfc26",
	"8e278f04-c7b5-4e56-b0bd-bb8a4e00932e",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("f3d962f2-8d6f-4874-8d9f-25ffd48ebbd2",
	"8e278f04-c7b5-4e56-b0bd-bb8a4e00932e",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f50b82c2-1772-4d4c-9736-904728edfc26",
	'');
INSERT INTO S_SPARM
	VALUES ("fdb32fe6-cbda-4b22-82c9-c8c8792f7727",
	"8e278f04-c7b5-4e56-b0bd-bb8a4e00932e",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f3d962f2-8d6f-4874-8d9f-25ffd48ebbd2",
	'');
INSERT INTO S_SPARM
	VALUES ("64a71a93-ea89-4308-822b-7ce0625e6a0c",
	"8e278f04-c7b5-4e56-b0bd-bb8a4e00932e",
	'task',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"fdb32fe6-cbda-4b22-82c9-c8c8792f7727",
	'');
INSERT INTO PE_PE
	VALUES ("8e278f04-c7b5-4e56-b0bd-bb8a4e00932e",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("da5047e1-e9a9-4260-b7ff-95db782f5d49",
	"00000000-0000-0000-0000-000000000000",
	'MarkAsChannel',
	'',
	'//============================================================================
// $RCSfile: m.component.arc,v $
//
// Description:
// Component level marking functions are found here.
//============================================================================
//
//
//============================================================================
// Mark components as channels using package name and/or component
// name as the selection criteria.
//============================================================================
package_name = param.package_name;
component_name = param.component_name;
inc_file = param.inc_file;
::MarkComponentAsChannel( package_name:package_name, component_name:component_name, inc_file:inc_file );
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("c65ef24f-4841-4deb-b836-688c237455ec",
	"da5047e1-e9a9-4260-b7ff-95db782f5d49",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("beba85e4-4250-43f6-9f84-489c0fea0b5a",
	"da5047e1-e9a9-4260-b7ff-95db782f5d49",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"c65ef24f-4841-4deb-b836-688c237455ec",
	'');
INSERT INTO S_SPARM
	VALUES ("4df1977c-c5cf-4e88-990f-c2e1d5f58c28",
	"da5047e1-e9a9-4260-b7ff-95db782f5d49",
	'inc_file',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"beba85e4-4250-43f6-9f84-489c0fea0b5a",
	'');
INSERT INTO PE_PE
	VALUES ("da5047e1-e9a9-4260-b7ff-95db782f5d49",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("861fef62-9761-4441-80e5-70e9f14a5e2e",
	"00000000-0000-0000-0000-000000000000",
	'MarkComponentAsChannel',
	'',
	'package_name = param.package_name;
component_name = param.component_name;
inc_file = param.inc_file;
select many c_cs from instances of C_C where ( false );
if ( ( ( "" == package_name ) and ( "" == component_name ) ) or ( ( "*" == package_name ) and ( "*" == component_name ) ) )
  // all components
  select many c_cs from instances of C_C;
elif ( ( "" == package_name ) or ( "*" == package_name ) )
  // matches without respect to package
  select many c_cs from instances of C_C where ( selected.Name == component_name );
elif ( ( "" == component_name ) or ( "*" == component_name ) )
  // all components in packages with given name
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select many c_cs related by ep_pkgs->PE_PE[R8000]->C_C[R8001];
else
  // particular component in particular package(s)
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select many c_cs related by ep_pkgs->PE_PE[R8000]->C_C[R8001] where ( selected.Name == component_name );
end if;
select many te_cs related by c_cs->TE_C[R2054];
if ( empty te_cs )
  T::print(s:"WARNING:  MarkComponentAsChannel - Could not find component ${package_name}::${component_name}.");
end if;
for each te_c in te_cs
  select one tm_c related by te_c->TM_C[R2804];
  if ( empty tm_c )
    create object instance tm_c of TM_C;
    tm_c.Package = package_name;
    tm_c.Name = component_name;
    relate te_c to tm_c across R2804;
  end if;
  tm_c.isChannel = true;
  tm_c.include_file = inc_file;
  // Now that we have marked this component as a channel modify the message names
  select many te_macts related by te_c->TE_MACT[R2002];
  for each te_mact in te_macts
    select one te_aba related by te_mact->TE_ABA[R2010];
    te_mact.GeneratedName = te_mact.MessageName;
    te_mact.GeneratedName = T::r(s:te_mact.GeneratedName);
    te_aba.GeneratedName = te_mact.GeneratedName;
  end for;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("e5ad2c67-4087-4a86-a7fa-2c3ff3b92948",
	"861fef62-9761-4441-80e5-70e9f14a5e2e",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("06371a9f-469b-4156-a77b-030067d7ec48",
	"861fef62-9761-4441-80e5-70e9f14a5e2e",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"e5ad2c67-4087-4a86-a7fa-2c3ff3b92948",
	'');
INSERT INTO S_SPARM
	VALUES ("8387a6ab-d1f4-4fd9-b366-460e1eadf32a",
	"861fef62-9761-4441-80e5-70e9f14a5e2e",
	'inc_file',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"06371a9f-469b-4156-a77b-030067d7ec48",
	'');
INSERT INTO PE_PE
	VALUES ("861fef62-9761-4441-80e5-70e9f14a5e2e",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f582ed3d-ee82-41ea-8342-5a3ab6a4ea53",
	"00000000-0000-0000-0000-000000000000",
	'MarkComponentWithTemplate',
	'',
	'//
//============================================================================
// Mark a component that has a C++ template.
//============================================================================
package_name = param.package_name;
component_name = param.component_name;
select many c_cs from instances of C_C where ( false );
if ( ( ( "" == package_name ) and ( "" == component_name ) ) or ( ( "*" == package_name ) and ( "*" == component_name ) ) )
  // all components
  select many c_cs from instances of C_C;
elif ( ( "" == package_name ) or ( "*" == package_name ) )
  // matches without respect to package
  select many c_cs from instances of C_C where ( selected.Name == component_name );
elif ( ( "" == component_name ) or ( "*" == component_name ) )
  // all components in packages with given name
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select many c_cs related by ep_pkgs->PE_PE[R8000]->C_C[R8001];
else
  // particular component in particular package(s)
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select many c_cs related by ep_pkgs->PE_PE[R8000]->C_C[R8001] where ( selected.Name == component_name );
end if;
select many te_cs related by c_cs->TE_C[R2054];
if ( empty te_cs )
  T::print(s:"WARNING:  MarkComponentWithTemplate - Could not find component ${package_name}::${component_name}.");
end if;
for each te_c in te_cs
  select one tm_c related by te_c->TM_C[R2804];
  if ( empty tm_c )
    create object instance tm_c of TM_C;
    tm_c.Package = package_name;
    tm_c.Name = component_name;
    tm_c.isChannel = false;
    tm_c.include_file = "";
  end if;
  if ( not_empty te_c )
    relate te_c to tm_c across R2804;
  end if;
  // Make the new template the current one for follow-on markings.
  select many tm_templates from instances of TM_TEMPLATE;
  for each tm_template in tm_templates
    tm_template.current = false;
  end for;
  create object instance tm_template of TM_TEMPLATE;
  tm_template.current = true;
  relate tm_template to tm_c across R2800;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("91dee81a-292b-4312-8b35-4bef74912915",
	"f582ed3d-ee82-41ea-8342-5a3ab6a4ea53",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("2fd69373-c4e3-4ee6-a4ff-9d9db7ee3de9",
	"f582ed3d-ee82-41ea-8342-5a3ab6a4ea53",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"91dee81a-292b-4312-8b35-4bef74912915",
	'');
INSERT INTO PE_PE
	VALUES ("f582ed3d-ee82-41ea-8342-5a3ab6a4ea53",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("76e1a144-2ad3-4ef0-a209-71a307ca63b2",
	"00000000-0000-0000-0000-000000000000",
	'MarkInterfaceWithTemplate',
	'',
	'//
//============================================================================
// Mark an interface that has a C++ template.
//============================================================================
package_name = param.package_name;
interface_name = param.interface_name;
select any c_i from instances of C_I where ( false );
if ( ( "" == package_name ) or ( "*" == package_name ) )
  select any c_i from instances of C_I where ( selected.Name == interface_name );
else
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select any c_i related by ep_pkgs->PE_PE[R8000]->C_I[R8001] where ( selected.Name == interface_name );
end if;
if ( empty c_i )
  T::print(s:"WARNING:  MarkInterfaceWithTemplate - Could not find interface ${package_name}::${interface_name}.");
end if;
create object instance tm_if of TM_IF;
tm_if.Package = package_name;
tm_if.Name = interface_name;
relate tm_if to c_i across R2807;
// Make the new template the current one for follow-on markings.
select many tm_templates from instances of TM_TEMPLATE;
for each tm_template in tm_templates
  tm_template.current = false;
end for;
create object instance tm_template of TM_TEMPLATE;
tm_template.current = true;
relate tm_template to tm_if across R2802;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("bfb57524-c45a-4351-b800-257f11d762e9",
	"76e1a144-2ad3-4ef0-a209-71a307ca63b2",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("541c9c28-a5c6-432f-8577-8b75835c0e17",
	"76e1a144-2ad3-4ef0-a209-71a307ca63b2",
	'interface_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"bfb57524-c45a-4351-b800-257f11d762e9",
	'');
INSERT INTO PE_PE
	VALUES ("76e1a144-2ad3-4ef0-a209-71a307ca63b2",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b3ef2aa6-747a-403f-abbb-c60d68c044ba",
	"00000000-0000-0000-0000-000000000000",
	'AddTemplateParameter',
	'',
	'//
//============================================================================
// Add a template parameter to a C++ template.
// The template is located based upon the associated component.
//============================================================================
package_name = param.package_name;
component_name = param.component_name;
type_name = param.type_name;
variable_name = param.variable_name;
default_value = param.default_value;
select any tm_template from instances of TM_TEMPLATE where ( selected.current );
select any tm_c from instances of TM_C where ( ( selected.Package == package_name ) and ( selected.Name == component_name ) );
if ( ( "" == package_name ) or ( "*" == package_name ) )
  select any tm_c from instances of TM_C where ( selected.Name == component_name );
  if ( empty tm_c )
    select one tm_c related by tm_template->TM_C[R2800];
  end if;
end if;
if ( empty tm_c )
  select any tm_if from instances of TM_IF where ( ( selected.Package == package_name ) and ( selected.Name == component_name ) );
  if ( ( "" == package_name ) or ( "*" == package_name ) )
    select any tm_if from instances of TM_IF where ( selected.Name == component_name );
    if ( empty tm_if )
      select one tm_if related by tm_template->TM_IF[R2802];
    end if;
  end if;
  if ( empty tm_if )
    T::print(s:"ERROR:  AddTemplateParameter - Could not find element (component or interface) ${package_name}::${component_name}.");
  else
    select one tm_template related by tm_if->TM_TEMPLATE[R2802];
  end if;
else
  select one tm_template related by tm_c->TM_TEMPLATE[R2800];
end if;
if ( not_empty tm_template )
  create object instance tm_tp of TM_TP;
  relate tm_tp to tm_template across R2801;
  tm_tp.typename = type_name;
  tm_tp.Name = variable_name;
  tm_tp.DefaultValue = default_value;
else
  T::print(s:"ERROR:  AddTemplateParameter - Could not find template for element ${package_name}::${component_name}.");
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("f5dacc04-ab72-43ea-b105-fd43293e3a0c",
	"b3ef2aa6-747a-403f-abbb-c60d68c044ba",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("8e5d2715-de36-4dd1-bc27-f097e117a0a0",
	"b3ef2aa6-747a-403f-abbb-c60d68c044ba",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f5dacc04-ab72-43ea-b105-fd43293e3a0c",
	'');
INSERT INTO S_SPARM
	VALUES ("896c1db6-6bdd-4c2f-be92-fc6867df564f",
	"b3ef2aa6-747a-403f-abbb-c60d68c044ba",
	'type_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"8e5d2715-de36-4dd1-bc27-f097e117a0a0",
	'');
INSERT INTO S_SPARM
	VALUES ("daf36f43-3600-4f5a-8180-7c8989a8e074",
	"b3ef2aa6-747a-403f-abbb-c60d68c044ba",
	'variable_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"896c1db6-6bdd-4c2f-be92-fc6867df564f",
	'');
INSERT INTO S_SPARM
	VALUES ("49f200b4-9dbc-4c52-88a1-590cacb12ca3",
	"b3ef2aa6-747a-403f-abbb-c60d68c044ba",
	'default_value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"daf36f43-3600-4f5a-8180-7c8989a8e074",
	'');
INSERT INTO PE_PE
	VALUES ("b3ef2aa6-747a-403f-abbb-c60d68c044ba",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f35cd4e2-26ea-4165-a70e-ddad3a3fd8ee",
	"00000000-0000-0000-0000-000000000000",
	'SetTemplateParameter',
	'',
	'//
//============================================================================
// Set the template parameter for an instance of a component or interface
// class.  The template is navigated based upon the associated package
// and instance.
//============================================================================
package_name = param.package_name;
instance = param.instance;
variable_name = param.variable_name;
value = param.value;
// Base selection upon the template that most recently got created.
select any tm_template from instances of TM_TEMPLATE where ( selected.current );
select one tm_c related by tm_template->TM_C[R2800];
select one tm_if related by tm_template->TM_IF[R2802];
select any tm_tp related by tm_template->TM_TP[R2801] where ( selected.Name == variable_name );
if ( ( ( "" == package_name ) or ( "" == instance ) ) or ( ( "" == variable_name ) or ( "" == value ) ) )
  T::print(s:"ERROR:  SetTemplateParameter -  Must provide valid strings for all arguments. ${package_name}::${instance}.${variable_name} to value ${value}.");
else
  select any ep_pkg from instances of EP_PKG where ( selected.Name == package_name );
  if ( empty ep_pkg )
    T::print(s:"ERROR:  SetTemplateParameter -  Package, ${package_name}, not found for ${package_name}::${instance}.${variable_name} to value ${value}.");
  end if;
  if ( not_empty tm_tp )
    if ( not_empty tm_c )
      select any te_ci related by ep_pkg->PE_PE[R8000]->CL_IC[R8001]->TE_CI[R2009] where ( selected.ClassifierName == instance );
      if ( empty te_ci )
        select any te_ci related by ep_pkg->PE_PE[R8000]->C_C[R8001]->PE_PE[R8003]->CL_IC[R8001]->TE_CI[R2009] where ( selected.ClassifierName == instance );
      end if;
      if ( not_empty te_ci )
        create object instance tm_tpv of TM_TPV;
        tm_tpv.instance = instance;
        tm_tpv.value = value;
        relate tm_tpv to tm_tp across R2808;
        relate tm_tpv to te_ci across R2805;
      else
        T::print(s:"ERROR:  SetTemplateParameter - no component instance for ${package_name}::${instance} with name ${variable_name}.");
      end if;
    elif ( not_empty tm_if )
      select many te_iirs related by ep_pkg->PE_PE[R8000]->CL_IC[R8001]->CL_POR[R4707]->CL_IIR[R4708]->TE_IIR[R2013] where ( ( selected.port_name == instance ) and ( selected.interface_name == tm_if.Name ) );
      for each te_iir in te_iirs
        create object instance tm_tpv of TM_TPV;
        tm_tpv.instance = instance;
        tm_tpv.value = value;
        relate tm_tpv to tm_tp across R2808;
        relate tm_tpv to te_iir across R2806;
      end for;
      select many te_iirs related by ep_pkg->PE_PE[R8000]->C_C[R8001]->PE_PE[R8003]->CL_IC[R8001]->CL_POR[R4707]->CL_IIR[R4708]->TE_IIR[R2013] where ( ( selected.port_name == instance ) and ( selected.interface_name == tm_if.Name ) );
      for each te_iir in te_iirs
        create object instance tm_tpv of TM_TPV;
        tm_tpv.instance = instance;
        tm_tpv.value = value;
        relate tm_tpv to tm_tp across R2808;
        relate tm_tpv to te_iir across R2806;
      end for;
      select many te_iirs related by ep_pkg->PE_PE[R8000]->C_C[R8001]->C_PO[R4010]->C_IR[R4016]->TE_IIR[R2046] where ( ( selected.port_name == instance ) and ( selected.interface_name == tm_if.Name ) );
      for each te_iir in te_iirs
        create object instance tm_tpv of TM_TPV;
        tm_tpv.instance = instance;
        tm_tpv.value = value;
        relate tm_tpv to tm_tp across R2808;
        relate tm_tpv to te_iir across R2806;
      end for;
    else
      T::print(s:"ERROR:  SetTemplateParameter - Found a template parameter for a template that is orphaned.");
    end if;
  else
    T::print(s:"WARNING:  SetTemplateParameter - Did NOT find template parameter for package ${package_name}::${instance} with name ${variable_name}.");
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("778b7152-cc1a-4068-8ab4-45f84fe94a00",
	"f35cd4e2-26ea-4165-a70e-ddad3a3fd8ee",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("430764d2-fc77-44c4-b7d9-a657ede25cf9",
	"f35cd4e2-26ea-4165-a70e-ddad3a3fd8ee",
	'instance',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"778b7152-cc1a-4068-8ab4-45f84fe94a00",
	'');
INSERT INTO S_SPARM
	VALUES ("f05aeb0d-d458-46f9-929c-baf462ed2c55",
	"f35cd4e2-26ea-4165-a70e-ddad3a3fd8ee",
	'variable_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"430764d2-fc77-44c4-b7d9-a657ede25cf9",
	'');
INSERT INTO S_SPARM
	VALUES ("0a793dcf-5fa9-4a24-ba01-025e35ab1fa4",
	"f35cd4e2-26ea-4165-a70e-ddad3a3fd8ee",
	'value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f05aeb0d-d458-46f9-929c-baf462ed2c55",
	'');
INSERT INTO PE_PE
	VALUES ("f35cd4e2-26ea-4165-a70e-ddad3a3fd8ee",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("91769cf7-b467-4815-8098-0aaf585f37d1",
	"00000000-0000-0000-0000-000000000000",
	'SetTPV',
	'',
	'//
//============================================================================
// Set Template Parameter Value
//   Once components and interfaces have been marked with C++ templates
//   and all template parameters added, the template parameter values can
//   be set and associated with the appropriate component and interface
//   instances (component references and ports).
//   Set the template parameter for an instance of a component or interface
//   class.  The template is navigated based upon the associated package
//   and instance.
//============================================================================
package_name = param.package_name;
parent_component = param.parent_component;
component = param.component;
classifier_name = param.classifier_name;
port = param.port;
variable_name = param.variable_name;
value = param.value;
trace = "${package_name}::${parent_component}::${component}:${classifier_name}.${variable_name} value ${value} (and port ${port})";
if ( ( ( "" == package_name ) or ( "" == component ) ) or ( ( "" == classifier_name ) or ( ( ( "" == variable_name ) or ( "" == value ) ) ) ) )
  T::print(s:"ERROR:  SetTPV - Must provide valid strings for all arguments except the optional port, ${package_name}::${parent_component}::${component}:${classifier_name}.${variable_name} to value ${value} (and port ${port}).");
else
  select any ep_pkg from instances of EP_PKG where ( selected.Name == package_name );
  if ( empty ep_pkg )
    T::print(s:"ERROR:  SetTPV -  Package, ${package_name}, not found for ${package_name}::${parent_component}::${component}:${classifier_name}.${variable_name} to value ${value}.");
  end if;
  select many te_cis related by ep_pkg->PE_PE[R8000]->CL_IC[R8001]->TE_CI[R2009] where ( ( selected.Name == component ) and ( selected.ClassifierName == classifier_name ) );
  if ( "" != parent_component )
    select many c_cs related by ep_pkg->PE_PE[R8000]->C_C[R8001] where ( selected.Name == parent_component );
    select many te_cis related by c_cs->PE_PE[R8003]->CL_IC[R8001]->TE_CI[R2009] where ( ( selected.Name == component ) and ( selected.ClassifierName == classifier_name ) );
  else
    if ( empty te_cis )
      select many te_cis related by ep_pkg->PE_PE[R8000]->C_C[R8001]->PE_PE[R8003]->CL_IC[R8001]->TE_CI[R2009] where ( ( selected.Name == component ) and ( selected.ClassifierName == classifier_name ) );
    end if;
  end if;
  te_cis_count = cardinality te_cis;
  if ( te_cis_count > 1 )
    T::print(s:"WARNING:  SetTPV - More than one instantiation found for ${package_name}::${parent_component}::${component}:${classifier_name}.${variable_name} to value ${value}.");
    T::print(s:"                   All instantiations will be marked to receive the same template parameter value.");
  elif ( 0 == te_cis_count )
    T::print(s:"ERROR:  SetTPV - Component instance not found for ${package_name}::${parent_component}::${component}:${classifier_name}.");
  end if;
  if ( "" == port )
    // We are setting values for component templates.
    for each te_ci in te_cis
      select one tm_template related by te_ci->TE_C[R2008]->TM_C[R2804]->TM_TEMPLATE[R2800];
      select any tm_tp related by tm_template->TM_TP[R2801] where ( selected.Name == variable_name );
      if ( not_empty tm_tp )
        // Create the template parameter value and link it in.
        create object instance tm_tpv of TM_TPV;
        tm_tpv.instance = component;
        tm_tpv.value = value;
        relate tm_tpv to tm_tp across R2808;
        relate tm_tpv to te_ci across R2805;
      else
        T::print(s:"WARNING:  SetTPV - Template parameter not found for ${package_name}::${parent_component}::${component}:${classifier_name}.");
      end if;
    end for;
  else
    // We are setting a value for an interface template.
    for each te_ci in te_cis
      select any te_iir related by te_ci->CL_IC[R2009]->CL_POR[R4707]->CL_IIR[R4708]->TE_IIR[R2013] where ( selected.port_name == port );
      ::SetTPV_for_channel_connection( te_iir:te_iir, variable_name:variable_name, value:value, trace:trace, flavor:0 );
    end for;
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("1c643123-eb1c-4848-82af-36a06b24b11c",
	"91769cf7-b467-4815-8098-0aaf585f37d1",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("fcc38279-6a45-41aa-a417-9295459f57dc",
	"91769cf7-b467-4815-8098-0aaf585f37d1",
	'parent_component',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"1c643123-eb1c-4848-82af-36a06b24b11c",
	'');
INSERT INTO S_SPARM
	VALUES ("8bc3f921-1fce-4fcf-8ec5-0a71ecbe190d",
	"91769cf7-b467-4815-8098-0aaf585f37d1",
	'component',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"fcc38279-6a45-41aa-a417-9295459f57dc",
	'');
INSERT INTO S_SPARM
	VALUES ("765c90fd-b7f6-468e-8b13-32efa6b4c3a8",
	"91769cf7-b467-4815-8098-0aaf585f37d1",
	'classifier_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"8bc3f921-1fce-4fcf-8ec5-0a71ecbe190d",
	'');
INSERT INTO S_SPARM
	VALUES ("bcddeb99-bc42-4157-8158-71b12f07947e",
	"91769cf7-b467-4815-8098-0aaf585f37d1",
	'port',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"765c90fd-b7f6-468e-8b13-32efa6b4c3a8",
	'');
INSERT INTO S_SPARM
	VALUES ("437e932c-e53d-466e-bda2-40a621e4f328",
	"91769cf7-b467-4815-8098-0aaf585f37d1",
	'variable_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"bcddeb99-bc42-4157-8158-71b12f07947e",
	'');
INSERT INTO S_SPARM
	VALUES ("69096b14-5a32-4678-b54f-d8f3d1c720df",
	"91769cf7-b467-4815-8098-0aaf585f37d1",
	'value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"437e932c-e53d-466e-bda2-40a621e4f328",
	'');
INSERT INTO PE_PE
	VALUES ("91769cf7-b467-4815-8098-0aaf585f37d1",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7d205251-206a-4ecf-bb17-6a8454f475dc",
	"00000000-0000-0000-0000-000000000000",
	'SetTPV_for_channel_connection',
	'',
	'//
// Rules
// Always start from IIR.
// On a first call, first try to cross a satisfaction from IIR.
// It is only possible to go upward on a delegation on the first call.
// After the first call, it is O.K. to cross a satisfaction after crossing
// a delegation.
// After traversing to an imported interface reference, consider marking
// the associated interface reference.  (Mark both.)
// Gather all the delegated_te_iirs into a collection and then loop through.
// This is necessary for delegations only.
// Be smart and look for only the right types in the right direction.
te_iir = param.te_iir;
variable_name = param.variable_name;
value = param.value;
trace = param.trace;
flavor = param.flavor;
select many delegated_te_iirs from instances of TE_IIR where ( false );
// flavors:  0:firstcall, 1:coming from satisfaction, 2:coming from delegation
select any tm_tp related by te_iir->C_IR[R2046]->C_I[R4012]->TM_IF[R2807]->TM_TEMPLATE[R2802]->TM_TP[R2801] where ( selected.Name == variable_name );
if ( empty tm_tp )
  select any tm_tp related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_I[R4012]->TM_IF[R2807]->TM_TEMPLATE[R2802]->TM_TP[R2801] where ( selected.Name == variable_name );
  if ( empty tm_tp )
    T::print(s:"WARNING:  SetTPV - Template parameter not found for ${trace}.");
  end if;
end if;
// Determine whether we have an interface reference for a component marked
// as a channel.  Process channel interface references on first call only.
select one tm_c related by te_iir->TE_PO[R2080]->TE_C[R2005]->TM_C[R2804];
isChannel = false;
if ( not_empty tm_c )
  isChannel = tm_c.isChannel;
end if;
// See if this template parameter already has a value for this reference.
select any tm_tpv related by te_iir->TM_TPV[R2806] where ( ( selected.instance == te_iir.interface_name ) and ( selected.tm_tpID == tm_tp.ID ) );
// If isChannel, then skip unless it is the first call.
if ( ( ( ( empty tm_tpv ) and ( not_empty tm_tp ) ) and ( not isChannel ) ) or ( 0 == flavor ) )
  //.select one te_c related by te_iir->TE_PO[R2080]->TE_C[R2005]
  //.print "${trace} ${te_iir.port_name} ${te_c.Name}"
  create object instance tm_tpv of TM_TPV;
  tm_tpv.instance = te_iir.interface_name;
  tm_tpv.value = value;
  relate tm_tpv to tm_tp across R2808;
  relate tm_tpv to te_iir across R2806;
  //
  // Find a satisfaction or delegation.  Recursively apply the same template parameter value to the connections.
  select one satisfied_te_iir related by te_iir->TE_IIR[R2081.''requires or delegates''] where ( false );
  if ( ( 0 == flavor ) or ( 2 == flavor ) )
    // iir to iir
    // Search from imported reference across satisfaction to imported reference provision to requirement.
    select many satisfied_te_iirs related by te_iir->CL_IIR[R2013]->CL_IP[R4703]->CL_IPINS[R4705]->C_SF[R4705]->CL_IR[R4706]->CL_IIR[R4703]->TE_IIR[R2013];
    if ( not_empty satisfied_te_iirs )
      for each satisfied_te_iir in satisfied_te_iirs
        ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 1${trace}", flavor:1 );
      end for;
    else
      // Search from imported reference across satisfaction to imported reference requirement to provision.
      select one satisfied_te_iir related by te_iir->CL_IIR[R2013]->CL_IR[R4703]->C_SF[R4706]->CL_IPINS[R4705]->CL_IP[R4705]->CL_IIR[R4703]->TE_IIR[R2013];
      if ( not_empty satisfied_te_iir )
        ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 2${trace}", flavor:1 );
      else
        // mixed iir and ir
        // Search from imported reference across satisfaction to reference imported provision to requirement.
        select many satisfied_te_iirs related by te_iir->CL_IIR[R2013]->CL_IP[R4703]->CL_IPINS[R4705]->C_SF[R4705]->C_R[R4002]->C_IR[R4009]->TE_IIR[R2046];
        if ( not_empty satisfied_te_iirs )
          for each satisfied_te_iir in satisfied_te_iirs
            ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 3${trace}", flavor:1 );
          end for;
        else
          // Search from imported reference across satisfaction to reference imported requirement to provision.
          select one satisfied_te_iir related by te_iir->CL_IIR[R2013]->CL_IR[R4703]->C_SF[R4706]->C_P[R4002]->C_IR[R4009]->TE_IIR[R2046];
          if ( not_empty satisfied_te_iir )
            ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 4${trace}", flavor:1 );
          else
            // Search from reference across satisfaction to reference provision to requirement.
            select any satisfied_te_iir related by te_iir->C_IR[R2046]->C_P[R4009]->C_SF[R4002]->C_R[R4002]->C_IR[R4009]->TE_IIR[R2046];
            if ( not_empty satisfied_te_iir )
              ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 4a${trace}", flavor:1 );
            else
              // Search from reference across satisfaction to reference requirement to provision.
              select any satisfied_te_iir related by te_iir->C_IR[R2046]->C_R[R4009]->C_SF[R4002]->C_P[R4002]->C_IR[R4009]->TE_IIR[R2046];
              if ( not_empty satisfied_te_iir )
                ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 4b${trace}", flavor:1 );
              else
                // Search from reference across satisfaction to imported reference imported provision to requirement.
                // CDS should not find these, because we already go the other mixed direction?
                //.select one satisfied_te_iir related by te_iir->C_IR[R2046]->C_P[R4009]->C_SF[R4002]->CL_IR[R4706]->CL_IIR[R4703]->TE_IIR[R2013]
                if ( not_empty satisfied_te_iir )
                  ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 5${trace}", flavor:1 );
                else
                  // Search from reference across satisfaction to imported reference imported requirement to provision.
                  // CDS should not find these, because we already go the other mixed direction?
                  //.select one satisfied_te_iir related by te_iir->C_IR[R2046]->C_R[R4009]->C_SF[R4002]->CL_IPINS[R4705]->CL_IP[R4705]->CL_IIR[R4703]->TE_IIR[R2013]
                  if ( not_empty satisfied_te_iir )
                    ::SetTPV_for_channel_connection( te_iir:satisfied_te_iir, variable_name:variable_name, value:value, trace:" 6${trace}", flavor:1 );
                  end if;
                end if;
              end if;
            end if;
          end if;
        end if;
      end if;
    end if;
  end if;
  // delegation
  if ( empty satisfied_te_iir )
    select one delegated_te_iir related by satisfied_te_iir->TE_IIR[R2081.''requires or delegates''] where ( false );
    // IIR IR DG  RID IR
    select any delegated_te_iir related by te_iir->CL_IIR[R2013]->C_DG[R4704]->C_RID[R4013]->C_IR[R4013]->TE_IIR[R2046];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "7a " + trace;
    end if;
    select any delegated_te_iir related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_RID[R4013]->C_DG[R4013]->CL_IIR[R4704]->TE_IIR[R2013];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "7b " + trace;
    end if;
    //     IR DG  RID IR
    select any delegated_te_iir related by te_iir->C_IR[R2046]->C_DG[R4014]->C_RID[R4013]->C_IR[R4013]->TE_IIR[R2046];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8a " + trace;
    end if;
    //     IR RID DG  IR
    select any delegated_te_iir related by te_iir->C_IR[R2046]->C_RID[R4013]->C_DG[R4013]->C_IR[R4014]->TE_IIR[R2046];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8b " + trace;
    end if;
    // IIR IR DG  RID IR
    select any delegated_te_iir related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_DG[R4014]->C_RID[R4013]->C_IR[R4013]->TE_IIR[R2046];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8c " + trace;
    end if;
    //     IR DG  RID IR IIR
    select any delegated_te_iir related by te_iir->C_IR[R2046]->C_DG[R4014]->C_RID[R4013]->C_IR[R4013]->CL_IIR[R4701]->TE_IIR[R2013];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8d " + trace;
    end if;
    // IIR IR RID DG  IR
    select many more_delegated_te_iirs related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_RID[R4013]->C_DG[R4013]->C_IR[R4014]->TE_IIR[R2046];
    if ( not_empty more_delegated_te_iirs )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8e " + trace;
    end if;
    //     IR RID DG  IR IIR
    select many more_delegated_te_iirs related by te_iir->C_IR[R2046]->C_RID[R4013]->C_DG[R4013]->C_IR[R4014]->CL_IIR[R4701]->TE_IIR[R2013];
    if ( not_empty more_delegated_te_iirs )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8f " + trace;
    end if;
    // IIR IR DG  RID IR IIR
    select any delegated_te_iir related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_DG[R4014]->C_RID[R4013]->C_IR[R4013]->CL_IIR[R4701]->TE_IIR[R2013];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8g " + trace;
    end if;
    // IIR IR RID DG  IR IIR
    select many more_delegated_te_iirs related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_RID[R4013]->C_DG[R4013]->C_IR[R4014]->CL_IIR[R4701]->TE_IIR[R2013];
    if ( not_empty more_delegated_te_iirs )
      delegated_te_iirs = delegated_te_iirs;
      trace = "8h " + trace;
    end if;
    select any delegated_te_iir related by te_iir->CL_IIR[R2013]->C_IR[R4701]->C_RID[R4013]->C_DG[R4013]->C_IR[R4014]->TE_IIR[R2046];
    if ( not_empty delegated_te_iir )
      delegated_te_iirs = delegated_te_iirs;
      trace = "B " + trace;
    end if;
    for each delegated_te_iir in delegated_te_iirs
      ::SetTPV_for_channel_connection( te_iir:delegated_te_iir, variable_name:variable_name, value:value, trace:"${trace}", flavor:2 );
    end for;
  end if;
else
  if ( empty tm_tp )
    T::print(s:"SetTPV:  warning - no variable ${te_iir.port_name} ${te_iir.interface_name}");
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("7e54d3f5-4661-4a9f-85e6-fe01a63e06e8",
	"7d205251-206a-4ecf-bb17-6a8454f475dc",
	'te_iir',
	"a765e935-11b6-42b5-a506-6c5c576bec7f",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("a765e935-11b6-42b5-a506-6c5c576bec7f",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Interface Instance>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/extensions/Translation Extensions/Translation Extensions.xtuml');
INSERT INTO S_SPARM
	VALUES ("07af3416-118c-47fc-8784-7b743b2e0e53",
	"7d205251-206a-4ecf-bb17-6a8454f475dc",
	'variable_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"7e54d3f5-4661-4a9f-85e6-fe01a63e06e8",
	'');
INSERT INTO S_SPARM
	VALUES ("9826de54-7fa6-4d64-b792-ba9392147a84",
	"7d205251-206a-4ecf-bb17-6a8454f475dc",
	'value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"07af3416-118c-47fc-8784-7b743b2e0e53",
	'');
INSERT INTO S_SPARM
	VALUES ("0072b450-cce5-457b-acf8-2592ffc8e572",
	"7d205251-206a-4ecf-bb17-6a8454f475dc",
	'trace',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"9826de54-7fa6-4d64-b792-ba9392147a84",
	'');
INSERT INTO S_SPARM
	VALUES ("b46b6ea6-e3d9-4416-8b7f-ad0c868323fb",
	"7d205251-206a-4ecf-bb17-6a8454f475dc",
	'flavor',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"0072b450-cce5-457b-acf8-2592ffc8e572",
	'');
INSERT INTO PE_PE
	VALUES ("7d205251-206a-4ecf-bb17-6a8454f475dc",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("267a81e0-dc59-4556-9bf2-d8a46fb1fd16",
	"00000000-0000-0000-0000-000000000000",
	'MarkInterfacePrefix',
	'',
	'//
//============================================================================
// Mark the prefixes for the interface naming.
//============================================================================
provided_port = param.provided_port;
required_port = param.required_port;
channel = param.channel;
select any te_prefix from instances of TE_PREFIX;
te_prefix.provided_port = provided_port;
te_prefix.required_port = required_port;
te_prefix.channel = channel;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("2aaed725-1709-4815-8a26-fda473267329",
	"267a81e0-dc59-4556-9bf2-d8a46fb1fd16",
	'provided_port',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("5ccdf228-00da-454b-92db-46856331d1bb",
	"267a81e0-dc59-4556-9bf2-d8a46fb1fd16",
	'required_port',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"2aaed725-1709-4815-8a26-fda473267329",
	'');
INSERT INTO S_SPARM
	VALUES ("963fae49-1a54-43b5-b5f7-00507a6febdf",
	"267a81e0-dc59-4556-9bf2-d8a46fb1fd16",
	'channel',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"5ccdf228-00da-454b-92db-46856331d1bb",
	'');
INSERT INTO PE_PE
	VALUES ("267a81e0-dc59-4556-9bf2-d8a46fb1fd16",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("990711bd-cc4e-48ac-8a7b-522b6440c1b0",
	"00000000-0000-0000-0000-000000000000",
	'MarkComponentAsRealized',
	'',
	'//
//============================================================================
// Mark components as realized using package name and/or component
// name as the selection criteria.
//============================================================================
package_name = param.package_name;
component_name = param.component_name;
inc_file = param.inc_file;
select many c_cs from instances of C_C where ( false );
if ( ( ( "" == package_name ) and ( "" == component_name ) ) or ( ( "*" == package_name ) and ( "*" == component_name ) ) )
  // all components
  select many c_cs from instances of C_C;
elif ( ( "" == package_name ) or ( "*" == package_name ) )
  // matches without respect to package
  select many c_cs from instances of C_C where ( selected.Name == component_name );
elif ( ( "" == component_name ) or ( "*" == component_name ) )
  // all components in packages with given name
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select many c_cs related by ep_pkgs->PE_PE[R8000]->C_C[R8001];
else
  // particular component in particular package(s)
  select many ep_pkgs from instances of EP_PKG where ( selected.Name == package_name );
  select many c_cs related by ep_pkgs->PE_PE[R8000]->C_C[R8001] where ( selected.Name == component_name );
end if;
if ( empty c_cs )
  T::print(s:"WARNING:  MarkComponentAsRealized - Could not find component ${package_name}::${component_name}.");
end if;
for each c_c in c_cs
  select any tm_c from instances of TM_C where ( ( selected.Name == component_name ) and ( selected.Package == package_name ) );
  if ( empty tm_c )
    create object instance tm_c of TM_C;
    tm_c.Package = package_name;
    tm_c.Name = component_name;
  end if;
  tm_c.isRealized = true;
  tm_c.include_file = inc_file;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("ebb61e5c-a4b0-4f06-84be-6f0a6fb58a5d",
	"990711bd-cc4e-48ac-8a7b-522b6440c1b0",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("c259299e-a78e-47f0-aff7-9a5509fd3a39",
	"990711bd-cc4e-48ac-8a7b-522b6440c1b0",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ebb61e5c-a4b0-4f06-84be-6f0a6fb58a5d",
	'');
INSERT INTO S_SPARM
	VALUES ("d08e78fa-a407-4a17-bd05-f82de008a478",
	"990711bd-cc4e-48ac-8a7b-522b6440c1b0",
	'inc_file',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"c259299e-a78e-47f0-aff7-9a5509fd3a39",
	'');
INSERT INTO PE_PE
	VALUES ("990711bd-cc4e-48ac-8a7b-522b6440c1b0",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9ad76c90-4597-479f-819f-1533946e2603",
	"00000000-0000-0000-0000-000000000000",
	'TagDataTypePrecision',
	'',
	'//============================================================================
// $RCSfile: m.datatype.arc,v $
//
// Description:
// This archetype file contains the implementation functions for marks
// specified in the (user supplied/modified) datatype.clr file.
//============================================================================
//
//============================================================================
component_name = param.component_name;
dt_name = param.dt_name;
tagged_name = param.tagged_name;
initial_value = param.initial_value;
component_name = T::r(s:component_name);
select any tm_precision from instances of TM_PRECISION where ( ( selected.Domain == component_name ) and ( selected.DT_name == dt_name ) );
if ( empty tm_precision )
  create object instance tm_precision of TM_PRECISION;
end if;
tm_precision.Domain = component_name;
tm_precision.DT_name = dt_name;
tm_precision.xName = tagged_name;
tm_precision.initial_value = initial_value;
T::print(s:"TagDataTypePrecision:  ${dt_name} in ${component_name} given ${tagged_name} precision with ${initial_value}.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("9f6dc647-a9d2-4e9d-9939-95ae86f7a7e0",
	"9ad76c90-4597-479f-819f-1533946e2603",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("8ad32f69-6682-451e-bef6-e75f804e71dc",
	"9ad76c90-4597-479f-819f-1533946e2603",
	'dt_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"9f6dc647-a9d2-4e9d-9939-95ae86f7a7e0",
	'');
INSERT INTO S_SPARM
	VALUES ("a0a84931-08dd-4f07-b694-a37fe15f1f8d",
	"9ad76c90-4597-479f-819f-1533946e2603",
	'tagged_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"8ad32f69-6682-451e-bef6-e75f804e71dc",
	'');
INSERT INTO S_SPARM
	VALUES ("3a33999f-ee17-4d19-a1ca-15fe32708a39",
	"9ad76c90-4597-479f-819f-1533946e2603",
	'initial_value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a0a84931-08dd-4f07-b694-a37fe15f1f8d",
	'');
INSERT INTO PE_PE
	VALUES ("9ad76c90-4597-479f-819f-1533946e2603",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("13cf15e5-ae44-4231-a26d-81fd753f8946",
	"00000000-0000-0000-0000-000000000000",
	'MapDataTypeAsPointer',
	'',
	'//
//============================================================================
// Map a user defined data type to a pointer.  This allows the system
// to pass arbitrarily shaped data around by simply pointing to it.
//============================================================================
component_name = param.component_name;
dt_name = param.dt_name;
pointer_type = param.pointer_type;
include_file = param.include_file;
component_name = T::r(s:component_name);
select any tm_pointer from instances of TM_POINTER where ( ( selected.Domain == component_name ) and ( selected.DT_name == dt_name ) );
if ( empty tm_pointer )
  create object instance tm_pointer of TM_POINTER;
end if;
tm_pointer.Domain = component_name;
tm_pointer.DT_name = dt_name;
tm_pointer.pointer_type = pointer_type;
tm_pointer.include_file = include_file;
T::print(s:"MapDataTypeAsPointer:  ${dt_name} in ${component_name} given ${pointer_type} mapping (${include_file}).");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("2e9781b7-1670-4c98-ad25-55efa99207e2",
	"13cf15e5-ae44-4231-a26d-81fd753f8946",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("4aea8c83-434f-4ed5-a860-15ac9d57ae6e",
	"13cf15e5-ae44-4231-a26d-81fd753f8946",
	'dt_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"2e9781b7-1670-4c98-ad25-55efa99207e2",
	'');
INSERT INTO S_SPARM
	VALUES ("ab099247-bf5b-4c29-b2a8-f0a6cb20f249",
	"13cf15e5-ae44-4231-a26d-81fd753f8946",
	'pointer_type',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"4aea8c83-434f-4ed5-a860-15ac9d57ae6e",
	'');
INSERT INTO S_SPARM
	VALUES ("38fd01ff-668b-4baa-b778-e97e51eec1a8",
	"13cf15e5-ae44-4231-a26d-81fd753f8946",
	'include_file',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ab099247-bf5b-4c29-b2a8-f0a6cb20f249",
	'');
INSERT INTO PE_PE
	VALUES ("13cf15e5-ae44-4231-a26d-81fd753f8946",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d5b02771-88af-4801-976a-36eabcf77777",
	"00000000-0000-0000-0000-000000000000",
	'TagEnumeratorDiscreteValue',
	'',
	'//
//============================================================================
// Specifying Values for Enumerators
//
// To indicate to the model compiler that a user defined enumeration
// data type enumerator (defined in the BridgePoint Subsystem Partitioning
// Model (SPM) component data editor) shall have a value other than the default,
// use the following invocation:
//
// TagEnumeratorDiscreteValue( "component", "enumeration", "enumerator", "value"
//
// Where the input parameters are:
//   component - Registered component name.  Use "*" to indicate a system wide
//     enumeration data type (to be applied to all components containing
//     the user defined enumeration data type).
//   enumeration - name of the enumeration data type as known in the
//     application analysis
//   enumerator - name of the enumerator as known in the application analysis
//   value - a string containing the value to be assigned to the enumerator
//
// Examples:
//  Domain specific:
//   .invoke TagEnumeratorDiscreteValue( "MO", "tube_wattage", "low", "4" )
//   .invoke TagEnumeratorDiscreteValue( "MO", "tube_wattage", "med", "0x20" )
//  System Wide:
//   .invoke TagEnumeratorDiscreteValue( "*", "tube_wattage", "high", "0x40" )
//
//============================================================================
component_name = param.component_name;
enumeration = param.enumeration;
enumerator = param.enumerator;
value = param.value;
component_name = T::r(s:component_name);
select any tm_enumval from instances of TM_ENUMVAL where ( ( ( selected.Domain == component_name ) and ( selected.enumeration == enumeration ) ) and ( selected.enumerator == enumerator ) );
if ( empty tm_enumval )
  create object instance tm_enumval of TM_ENUMVAL;
end if;
tm_enumval.Domain = component_name;
tm_enumval.enumeration = enumeration;
tm_enumval.enumerator = enumerator;
tm_enumval.value = value;
T::print(s:"TagEnumeratorDiscreteValue:  ${enumeration}::${enumerator} in ${component_name} given discrete value ${value}.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("0330bf90-66c8-4c18-a112-e1d37594cc41",
	"d5b02771-88af-4801-976a-36eabcf77777",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("a3ce155a-b990-4a43-9a0c-4e37acf641cf",
	"d5b02771-88af-4801-976a-36eabcf77777",
	'enumeration',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"0330bf90-66c8-4c18-a112-e1d37594cc41",
	'');
INSERT INTO S_SPARM
	VALUES ("258f4cf6-ca56-497c-aa38-8eab6481ba24",
	"d5b02771-88af-4801-976a-36eabcf77777",
	'enumerator',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a3ce155a-b990-4a43-9a0c-4e37acf641cf",
	'');
INSERT INTO S_SPARM
	VALUES ("ce5d8837-0a22-4006-9c0a-98844081951b",
	"d5b02771-88af-4801-976a-36eabcf77777",
	'value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"258f4cf6-ca56-497c-aa38-8eab6481ba24",
	'');
INSERT INTO PE_PE
	VALUES ("d5b02771-88af-4801-976a-36eabcf77777",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("86faf87e-8634-4f6e-b0bb-982da08f0cff",
	"00000000-0000-0000-0000-000000000000",
	'TagUninitializedEnumerationValue',
	'',
	'//
//============================================================================
// Specifying Value for the Default Un-Initialized Enumerator
//
// To indicate to the software architecture that the un-initialized enumerator
// of an enumeration (defined in the BridgePoint Subsystem Partitioning Model
// (SPM) component data editor) shall have a value other than the default,
// use the following invocation:
//
// TagUninitializedEnumerationValue( "component", "enumeration", "value" )
//
// Where the input parameters are:
//   component - Registered component name.  Use "*" to indicate a system wide
//     enumeration data type (to be applied to all components containing
//     the user defined enumeration data type).
//   enumeration - Name of the enumeration data type as known in the
//     application analysis. Use "*" to indicate ALL enumerations.
//   value - A string containing the value to be assigned to the uninitialized
//     enumerator.
//
// Examples:
//  Domain specific:
//   .invoke TagUninitializedEnumerationValue( "MO", "tube_wattage", "4" )
//  All Enumerations in Domain:
//   .invoke TagUninitializedEnumerationValue( "MO", "*", "40" )
//  System Wide:
//   .invoke TagUninitializedEnumerationValue( "*", "tube_wattage", "20" )
//  All Enumerations in All Domains:
//   .invoke TagUninitializedEnumerationValue( "*", "*", "100" )
//
//============================================================================
component_name = param.component_name;
enumeration = param.enumeration;
value = param.value;
component_name = T::r(s:component_name);
select any tm_enuminit from instances of TM_ENUMINIT where ( ( selected.Domain == component_name ) and ( selected.enumeration == enumeration ) );
if ( empty tm_enuminit )
  create object instance tm_enuminit of TM_ENUMINIT;
end if;
tm_enuminit.Domain = component_name;
tm_enuminit.enumeration = enumeration;
tm_enuminit.value = value;
T::print(s:"TagUninitializedEnumerationValue:  ${enumeration} in ${component_name} given default uninitialized value ${value}.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("eb4a3666-953f-49ce-be4a-4d9305e535df",
	"86faf87e-8634-4f6e-b0bb-982da08f0cff",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("07730b37-27b5-4232-984b-af70dd199b77",
	"86faf87e-8634-4f6e-b0bb-982da08f0cff",
	'enumeration',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"eb4a3666-953f-49ce-be4a-4d9305e535df",
	'');
INSERT INTO S_SPARM
	VALUES ("65371854-ec1d-4375-8142-c91e8a57873c",
	"86faf87e-8634-4f6e-b0bb-982da08f0cff",
	'value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"07730b37-27b5-4232-984b-af70dd199b77",
	'');
INSERT INTO PE_PE
	VALUES ("86faf87e-8634-4f6e-b0bb-982da08f0cff",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f5da9448-5891-4dad-a0f2-ea8d5106a078",
	"00000000-0000-0000-0000-000000000000",
	'AssignDirectToUDTPackage',
	'',
	'//
//
//============================================================================
// Specifying "Direct" manipulation to "SystemC UDT Pacakage"
//
// to indicate that this UDT package should be generated using its name
// instead of core type
//============================================================================
package_name = param.package_name;
T::print(s:"AssignDirectToUDTPackage is not a supported marking function.");
T::exit(i:1);
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("73314169-963e-4358-9c54-3678b67b07e8",
	"f5da9448-5891-4dad-a0f2-ea8d5106a078",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("f5da9448-5891-4dad-a0f2-ea8d5106a078",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("59c8a8b9-28b2-4cd5-a357-25f52f2decb2",
	"00000000-0000-0000-0000-000000000000",
	'TagFunctionTranslationOff',
	'',
	'//============================================================================
// $RCSfile: m.domain.arc,v $
//
// Description:
// This archetype file contains the implementation functions for colors
// specified in the (user supplied/modified) domain.mark file.
//============================================================================
//
//
//============================================================================
// Disable the translation of function processing semantics.
// The default is for all functions to be translated.
//============================================================================
function_name = param.function_name;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkFunctionTranslationOff( component_name:te_c.Name, function_name:function_name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("c9ef6b18-0e83-4dcf-abe3-91ac6193a6ce",
	"59c8a8b9-28b2-4cd5-a357-25f52f2decb2",
	'function_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("59c8a8b9-28b2-4cd5-a357-25f52f2decb2",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ba572e8f-241e-4e7a-8b84-b4783459eb4a",
	"00000000-0000-0000-0000-000000000000",
	'MarkFunctionTranslationOff',
	'',
	'component_name = param.component_name;
function_name = param.function_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  if ( "*" == function_name )
    select many te_syncs related by te_c->TE_SYNC[R2084];
    for each te_sync in te_syncs
      te_sync.XlateSemantics = FALSE;
      msg = "Turned off translation of ${te_sync.Name} function semantics.";
    end for;
  else
    select any te_sync related by te_c->TE_SYNC[R2084] where ( selected.Name == function_name );
    if ( not_empty te_sync )
      te_sync.XlateSemantics = FALSE;
      msg = "Turned off translation of ${function_name} function semantics.";
    else
      msg = "ERROR:  Function (${function_name}) not found in component ${te_c.Name}.";
      msg = msg + "\n  => TagFunctionTranslationOff( ${function_name} )";
    end if;
  end if;
  T::print(s:"${msg}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("6fb069eb-a1de-4ecf-989d-417f56a2d307",
	"ba572e8f-241e-4e7a-8b84-b4783459eb4a",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("c58c1a0d-397f-4a62-96c9-b9fb2980092d",
	"ba572e8f-241e-4e7a-8b84-b4783459eb4a",
	'function_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"6fb069eb-a1de-4ecf-989d-417f56a2d307",
	'');
INSERT INTO PE_PE
	VALUES ("ba572e8f-241e-4e7a-8b84-b4783459eb4a",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9836f95d-bd16-4093-9a28-a49fe051621d",
	"00000000-0000-0000-0000-000000000000",
	'TagInitializationFunction',
	'',
	'//
//============================================================================
// Mark a function as being executed during the initialization sequence.
// All functions marked with this interface will be run during bring-up.
// Functions bearing input arguments are not allowed to be tagged as
// initialization functions.
//============================================================================
function_name = param.function_name;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkInitializationFunction( component_name:te_c.Name, function_name:function_name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("ebf61861-63e7-4107-a73a-4136261ab595",
	"9836f95d-bd16-4093-9a28-a49fe051621d",
	'function_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("9836f95d-bd16-4093-9a28-a49fe051621d",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("722895a2-938d-458f-88e1-48231f2c6657",
	"00000000-0000-0000-0000-000000000000",
	'MarkInitializationFunction',
	'',
	'component_name = param.component_name;
function_name = param.function_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  select any te_sync related by te_c->TE_SYNC[R2084] where ( selected.Name == function_name );
  if ( not_empty te_sync )
    select any te_parm related by te_sync->TE_ABA[R2010]->TE_PARM[R2062];
    if ( empty te_parm )
      te_sync.IsInitFunction = true;
      msg = "Function ${te_sync.Name} marked as initialization function.";
    else
      msg = "ERROR:  Initialization function (${function_name}) in component ${te_c.Name}";
      msg = msg + "\ntakes arguments.  This is not allowed at initialization.";
      msg = msg + "\n  => TagInitializationFunction( ${function_name} )";
    end if;
  else
    msg = "ERROR:  Initialization function (${function_name}) not found in component ${te_c.Name}.";
    msg = msg + "\n  => TagInitializationFunction( ${function_name} )";
  end if;
  T::print(s:"${msg}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("5f698ede-605a-490d-85c7-2008d8fda180",
	"722895a2-938d-458f-88e1-48231f2c6657",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("7c224b94-41c2-43ba-babc-0fb803a7efc1",
	"722895a2-938d-458f-88e1-48231f2c6657",
	'function_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"5f698ede-605a-490d-85c7-2008d8fda180",
	'');
INSERT INTO PE_PE
	VALUES ("722895a2-938d-458f-88e1-48231f2c6657",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("fe7e6cf2-6774-400c-a34c-0871e04671ef",
	"00000000-0000-0000-0000-000000000000",
	'TagExcludeObjectFromCodeGen',
	'',
	'//
//============================================================================
obj_key_letters = param.obj_key_letters;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkExcludeObjectFromCodeGen( component_name:te_c.Name, obj_key_letters:obj_key_letters );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("19a86ed0-23f1-46a6-8c05-cf236a35a676",
	"fe7e6cf2-6774-400c-a34c-0871e04671ef",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("fe7e6cf2-6774-400c-a34c-0871e04671ef",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("06e02d49-5c39-4e69-bda2-c2a324cf7af1",
	"00000000-0000-0000-0000-000000000000",
	'MarkExcludeObjectFromCodeGen',
	'',
	'component_name = param.component_name;
obj_key_letters = param.obj_key_letters;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  select any te_class related by te_c->TE_CLASS[R2064] where ( selected.Key_Lett == obj_key_letters );
  if ( not_empty te_class )
    te_class.ExcludeFromGen = true;
    msg = "Object ${te_class.Name} (${te_class.Key_Lett}) excluded from code generation.";
  else
    msg = "ERROR:  Class (${obj_key_letters}) not found in component ${te_c.Name}";
    msg = msg + "\n => TagExcludeObjectFromCodeGen( ${obj_key_letters} )";
  end if;
  T::print(s:"${msg}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("1f9a551d-fa18-4383-8b01-a021fd265c18",
	"06e02d49-5c39-4e69-bda2-c2a324cf7af1",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("6750d269-c81c-4b5f-baf2-e02ae0c4819f",
	"06e02d49-5c39-4e69-bda2-c2a324cf7af1",
	'obj_key_letters',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"1f9a551d-fa18-4383-8b01-a021fd265c18",
	'');
INSERT INTO PE_PE
	VALUES ("06e02d49-5c39-4e69-bda2-c2a324cf7af1",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("37e81fe6-44e8-46a0-9141-80acf17944ff",
	"00000000-0000-0000-0000-000000000000",
	'TagExcludeSubsystemFromCodeGen',
	'',
	'//
//============================================================================
subsystem_name = param.subsystem_name;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkExcludeSubsystemFromCodeGen( component_name:te_c.Name, package_name:subsystem_name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("a6078409-7f4d-42b0-8c02-ac5794709979",
	"37e81fe6-44e8-46a0-9141-80acf17944ff",
	'subsystem_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("37e81fe6-44e8-46a0-9141-80acf17944ff",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f67dcb61-474b-405d-975a-ff2407434422",
	"00000000-0000-0000-0000-000000000000",
	'MarkExcludeSubsystemFromCodeGen',
	'',
	'component_name = param.component_name;
package_name = param.package_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  select many ep_pkgs related by te_c->C_C[R2054]->PE_PE[R8003]->EP_PKG[R8001]->PE_PE[R8000]->EP_PKG[R8001] where ( selected.Name == package_name );
  if ( not_empty ep_pkgs )
    select many te_classes related by ep_pkgs->PE_PE[R8000]->O_OBJ[R8001]->TE_CLASS[R2019];
    for each te_class in te_classes
      te_class.ExcludeFromGen = true;
    end for;
    msg = "All classes in package ${package_name} excluded from code generation.";
  else
    msg = "ERROR:  Package ${package_name} not found in component ${te_c.Name}.";
    msg = msg + "\n => TagExcludePackageFromCodeGen( ${package_name} )";
  end if;
  T::print(s:"${msg}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("293eb4e5-c75f-47a3-b0cc-135b73f0f0bb",
	"f67dcb61-474b-405d-975a-ff2407434422",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("6f176bca-26d2-4bcd-8a75-92f8e4eee213",
	"f67dcb61-474b-405d-975a-ff2407434422",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"293eb4e5-c75f-47a3-b0cc-135b73f0f0bb",
	'');
INSERT INTO PE_PE
	VALUES ("f67dcb61-474b-405d-975a-ff2407434422",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2cc34c36-f745-47cc-b088-ef38da5ca0cb",
	"00000000-0000-0000-0000-000000000000",
	'TagStateTransitionTracingOn',
	'',
	'//
//============================================================================
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkStateTransitionTracingOn( component_name:te_c.Name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("2cc34c36-f745-47cc-b088-ef38da5ca0cb",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("bbb33999-d48c-483c-92f8-d7cb15ff0bc5",
	"00000000-0000-0000-0000-000000000000",
	'MarkStateTransitionTracingOn',
	'',
	'component_name = param.component_name;
T::print(s:"Enabling state transition tracing for component(s) ${component_name}.");
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  te_c.StateTrace = true;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("dbba96d1-9f88-46fb-ae33-f0520c22860d",
	"bbb33999-d48c-483c-92f8-d7cb15ff0bc5",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("bbb33999-d48c-483c-92f8-d7cb15ff0bc5",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9a9ca971-a85e-422a-b27b-9a5ed1db451d",
	"00000000-0000-0000-0000-000000000000",
	'TagActionStatementTracingOn',
	'',
	'//
//============================================================================
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkActionStatementTracingOn( component_name:te_c.Name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("9a9ca971-a85e-422a-b27b-9a5ed1db451d",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e3b2c38e-ebf2-4cec-a131-33164c2d4ad1",
	"00000000-0000-0000-0000-000000000000",
	'MarkActionStatementTracingOn',
	'',
	'component_name = param.component_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  te_c.StmtTrace = true;
  T::print(s:"Action statement tracing enabled for component ${te_c.Name}.");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("7f7383a3-6242-4421-8a2e-07781e6339c7",
	"e3b2c38e-ebf2-4cec-a131-33164c2d4ad1",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("e3b2c38e-ebf2-4cec-a131-33164c2d4ad1",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c7a3841e-965e-4a83-8cec-80e57eaa6048",
	"00000000-0000-0000-0000-000000000000",
	'MarkMessageTracingOn',
	'',
	'//
//============================================================================
component_name = param.component_name;
port_name = param.port_name;
message_name = param.message_name;
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
select many te_pos related by te_cs->TE_PO[R2005] where ( selected.Name == port_name );
if ( ( "" == port_name ) or ( "*" == port_name ) )
  select many te_pos related by te_cs->TE_PO[R2005];
end if;
select many te_macts related by te_pos->TE_MACT[R2006] where ( selected.MessageName == message_name );
if ( ( "" == message_name ) or ( "*" == message_name ) )
  select many te_macts related by te_pos->TE_MACT[R2006];
end if;
for each te_mact in te_macts
  te_mact.trace = true;
end for;
if ( empty te_macts )
  T::print(s:"Warning:  No messages found to trace for ${component_name}::${port_name}::${message_name}.");
else
  T::print(s:"Message tracing enabled for ${component_name}::${port_name}::${message_name}.");
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("fd38b81d-686e-4242-a148-a39adcc49221",
	"c7a3841e-965e-4a83-8cec-80e57eaa6048",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("6c1537da-3d89-4af5-a5eb-02bf92f9371d",
	"c7a3841e-965e-4a83-8cec-80e57eaa6048",
	'port_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"fd38b81d-686e-4242-a148-a39adcc49221",
	'');
INSERT INTO S_SPARM
	VALUES ("921a1909-8111-4b23-b677-e7e40c5c4bb7",
	"c7a3841e-965e-4a83-8cec-80e57eaa6048",
	'message_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"6c1537da-3d89-4af5-a5eb-02bf92f9371d",
	'');
INSERT INTO PE_PE
	VALUES ("c7a3841e-965e-4a83-8cec-80e57eaa6048",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b6e3ea9f-32d4-4de2-81dd-c8f9c399bdbb",
	"00000000-0000-0000-0000-000000000000",
	'TagEmptyHandleDetectionOn',
	'',
	'//
//============================================================================
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkEmptyHandleDetectionOn( component_name:te_c.Name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("b6e3ea9f-32d4-4de2-81dd-c8f9c399bdbb",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("eef88f75-f089-42ae-90e0-29f02f697432",
	"00000000-0000-0000-0000-000000000000",
	'MarkEmptyHandleDetectionOn',
	'',
	'component_name = param.component_name;
T::print(s:"Enabling detection of empty handles for component(s) ${component_name}.");
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  te_c.DetectEmpty = true;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("df9964ea-ff48-4493-9eac-3d20b7e2a92f",
	"eef88f75-f089-42ae-90e0-29f02f697432",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("eef88f75-f089-42ae-90e0-29f02f697432",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2da156a2-ee21-47f7-a6b1-ffe2f1eec3ad",
	"00000000-0000-0000-0000-000000000000",
	'TagFirstPassOptimizationsOff',
	'',
	'//
//============================================================================
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkFirstPassOptimizationsOff( component_name:te_c.Name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("2da156a2-ee21-47f7-a6b1-ffe2f1eec3ad",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3e5ee53a-1b82-4218-a017-057240928636",
	"00000000-0000-0000-0000-000000000000",
	'MarkFirstPassOptimizationsOff',
	'',
	'component_name = param.component_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  te_c.OptDisabled = true;
  T::print(s:"Code optimizations DISABLED for component ${te_c.Name}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("b88fcbd0-ce66-44b5-9b89-41b28cc7cbc7",
	"3e5ee53a-1b82-4218-a017-057240928636",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("3e5ee53a-1b82-4218-a017-057240928636",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("54e4eea1-74f7-4fe8-9357-ae0a821391ea",
	"00000000-0000-0000-0000-000000000000",
	'TagStateActionCommentBlocksEnabled',
	'',
	'//
//============================================================================
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkStateActionCommentBlocksEnabled( component_name:te_c.Name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("54e4eea1-74f7-4fe8-9357-ae0a821391ea",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b4aa6c9b-78c5-4868-919f-90a1039a05ae",
	"00000000-0000-0000-0000-000000000000",
	'MarkStateActionCommentBlocksEnabled',
	'',
	'component_name = param.component_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  te_c.RawComments = true;
  T::print(s:"State action sematics will be included as comments for component ${te_c.Name}.");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("5ae50143-6542-4273-9048-6c473cfc9b85",
	"b4aa6c9b-78c5-4868-919f-90a1039a05ae",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("b4aa6c9b-78c5-4868-919f-90a1039a05ae",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("effce24a-be45-4765-a296-ba855903166b",
	"00000000-0000-0000-0000-000000000000",
	'TagStateActionStatementCommentsDisabled',
	'',
	'//
//============================================================================
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkStateActionStatementCommentsDisabled( component_name:te_c.Name );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("effce24a-be45-4765-a296-ba855903166b",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("98305da0-18fa-4afb-b48e-56c2db650c33",
	"00000000-0000-0000-0000-000000000000",
	'MarkStateActionStatementCommentsDisabled',
	'',
	'component_name = param.component_name;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  te_c.CodeComments = false;
  T::print(s:"State action statement level comments disabled for component ${te_c.Name}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("2e802e46-4040-4d3e-8229-3b2bd28d1d5e",
	"98305da0-18fa-4afb-b48e-56c2db650c33",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("98305da0-18fa-4afb-b48e-56c2db650c33",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9e76c900-0d0a-4a06-be04-4e03756ef94c",
	"00000000-0000-0000-0000-000000000000",
	'TagStateActionVariableNamesEnabled',
	'',
	'//
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("9e76c900-0d0a-4a06-be04-4e03756ef94c",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("80d002c9-5703-43e3-bb3d-8cdbd2ebfa35",
	"00000000-0000-0000-0000-000000000000",
	'TagVerboseReflexivePhrasesEnabled',
	'',
	'//
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("80d002c9-5703-43e3-bb3d-8cdbd2ebfa35",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a5375ceb-7859-4942-98b9-95cd3b338707",
	"00000000-0000-0000-0000-000000000000",
	'MarkPortWiring',
	'',
	'//
//
// Mark a port as having a component attached even though the component
// is not present in the model.
//
// .invoke MarkPortWiring( <home_component>, <home_port>, <foreign_component>, <foreign_port> )
// where:
//  <home_component> is the local component name.
//  <home_port> is the local port name.
//  <foreign_component> is the name of the component on the other side of
//                      the interface.
//  <foreign_port> is the name of the port on the other side of the interface.
//
//
home_component = param.home_component;
home_port = param.home_port;
foreign_component = param.foreign_component;
foreign_port = param.foreign_port;
select many te_cs from instances of TE_C where ( ( selected.Name == home_component ) and ( selected.included_in_build ) );
select many te_pos related by te_cs->TE_PO[R2005] where ( selected.Name == home_port );
::MarkPortWiringForPort( te_pos:te_pos, component:foreign_component, port:foreign_port );
select many te_cs from instances of TE_C where ( ( selected.Name == foreign_component ) and ( selected.included_in_build ) );
select many te_pos related by te_cs->TE_PO[R2005] where ( selected.Name == foreign_port );
::MarkPortWiringForPort( te_pos:te_pos, component:home_component, port:home_port );
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("819442d1-1e6a-45a6-870d-52747fd90b19",
	"a5375ceb-7859-4942-98b9-95cd3b338707",
	'home_component',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("61616b05-415a-4003-8b30-9f296e0c5db6",
	"a5375ceb-7859-4942-98b9-95cd3b338707",
	'home_port',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"819442d1-1e6a-45a6-870d-52747fd90b19",
	'');
INSERT INTO S_SPARM
	VALUES ("a0a6305b-8a46-4ac5-b5c3-15e259d31aed",
	"a5375ceb-7859-4942-98b9-95cd3b338707",
	'foreign_component',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"61616b05-415a-4003-8b30-9f296e0c5db6",
	'');
INSERT INTO S_SPARM
	VALUES ("753af4dd-3f3c-4ce0-85e7-a4527c1468fe",
	"a5375ceb-7859-4942-98b9-95cd3b338707",
	'foreign_port',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a0a6305b-8a46-4ac5-b5c3-15e259d31aed",
	'');
INSERT INTO PE_PE
	VALUES ("a5375ceb-7859-4942-98b9-95cd3b338707",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f285766a-50c4-4da4-a7cf-45b08aa8f109",
	"00000000-0000-0000-0000-000000000000",
	'MarkPortWiringForPort',
	'',
	'//
te_pos = param.te_pos;
component = param.component;
port = param.port;
for each te_po in te_pos
  select many te_iirs related by te_po->TE_IIR[R2080];
  for each te_iir in te_iirs
    if ( te_po.Provision )
      select many sibling_te_iirs related by te_iir->TE_IIR[R2081.''provides or is delegated''];
      if ( empty sibling_te_iirs )
        create object instance sibling_te_iir of TE_IIR;
        sibling_te_iir.component_name = component;
        sibling_te_iir.port_name = port;
        sibling_te_iir.interface_name = te_po.InterfaceName;
        sibling_te_iir.polymorphic = false;
        relate sibling_te_iir to te_iir across R2081.''requires or delegates'';
      end if;
    else
      select one sibling_te_iir related by te_iir->TE_IIR[R2081.''requires or delegates''];
      if ( empty sibling_te_iir )
        create object instance sibling_te_iir of TE_IIR;
        sibling_te_iir.component_name = component;
        sibling_te_iir.port_name = port;
        sibling_te_iir.interface_name = te_po.InterfaceName;
        sibling_te_iir.polymorphic = false;
        relate sibling_te_iir to te_iir across R2081.''requires or delegates'';
      end if;
    end if;
  end for;
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("2db17a01-9a17-4459-9818-335ae2180a04",
	"f285766a-50c4-4da4-a7cf-45b08aa8f109",
	'te_pos',
	"eafae685-f05e-4f3d-ad38-35b2a8c9b758",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("eafae685-f05e-4f3d-ad38-35b2a8c9b758",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref_set<Extended Port>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/extensions/Translation Extensions/Translation Extensions.xtuml');
INSERT INTO S_SPARM
	VALUES ("8a8b9557-feb8-4e22-bc7a-cec270ef5a1a",
	"f285766a-50c4-4da4-a7cf-45b08aa8f109",
	'component',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"2db17a01-9a17-4459-9818-335ae2180a04",
	'');
INSERT INTO S_SPARM
	VALUES ("3eb4c0d2-4f5a-47b4-aaac-98cde329cfcb",
	"f285766a-50c4-4da4-a7cf-45b08aa8f109",
	'port',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"8a8b9557-feb8-4e22-bc7a-cec270ef5a1a",
	'');
INSERT INTO PE_PE
	VALUES ("f285766a-50c4-4da4-a7cf-45b08aa8f109",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c00d4d18-2f29-4d15-b1b4-4fe0e73a8bca",
	"00000000-0000-0000-0000-000000000000",
	'TagDispatchFlavor',
	'',
	'//============================================================================
// $RCSfile: m.event.arc,v $
//
// Description:
// This archetype file contains the implementation functions for colors
// specified in the (user supplied/modified) event.clr file.
//============================================================================
//
//
//============================================================================
// Choose the type of dispatcher to run.  Zero is the default.
// Selecting 2 will provide a single system level event dispatcher.
//============================================================================
flavor = param.flavor;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("66d2c61a-c1e2-4d0f-a96d-fed7b73e3c9c",
	"c00d4d18-2f29-4d15-b1b4-4fe0e73a8bca",
	'flavor',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("c00d4d18-2f29-4d15-b1b4-4fe0e73a8bca",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b3f3bb23-5616-4aa5-b4fb-1f977528d845",
	"00000000-0000-0000-0000-000000000000",
	'TagPriorityEvent',
	'',
	'//
//============================================================================
// Color event to higher than default priority.
//============================================================================
evt_label = param.evt_label;
priority_value = param.priority_value;
select many te_cs from instances of TE_C;
for each te_c in te_cs
  ::MarkPriorityEvent( component_name:te_c.Name, evt_label:evt_label, priority_value:priority_value );
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("a6665b87-8ca2-4c81-92b1-c42cab028699",
	"b3f3bb23-5616-4aa5-b4fb-1f977528d845",
	'evt_label',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("0c0e7e48-aa29-42d5-a159-1d2284d1fbc9",
	"b3f3bb23-5616-4aa5-b4fb-1f977528d845",
	'priority_value',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"a6665b87-8ca2-4c81-92b1-c42cab028699",
	'');
INSERT INTO PE_PE
	VALUES ("b3f3bb23-5616-4aa5-b4fb-1f977528d845",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e3ee1c03-b339-4ddf-bf8f-6aef3d16c14f",
	"00000000-0000-0000-0000-000000000000",
	'MarkPriorityEvent',
	'',
	'component_name = param.component_name;
evt_label = param.evt_label;
priority_value = param.priority_value;
component_name = T::r(s:component_name);
select many te_cs from instances of TE_C where ( selected.Name == component_name );
if ( ( "" == component_name ) or ( "*" == component_name ) )
  select many te_cs from instances of TE_C;
end if;
for each te_c in te_cs
  msg = "";
  //
  // Check for legal range on input priority.
  //
  if ( ( priority_value > 255 ) or ( priority_value < 0 ) )
    msg = "ERROR:  Priority ($t{priority_value}) out of legal range (0-255).";
  end if;
  //
  // Store the priority of the event in an attribute.
  //
  select any sm_evt related by te_c->TE_CLASS[R2064]->O_OBJ[R2019]->SM_ISM[R518]->SM_SM[R517]->SM_EVT[R502] where ( selected.Drv_Lbl == evt_label );
  if ( empty sm_evt )
    select any sm_evt related by te_c->TE_CLASS[R2064]->O_OBJ[R2019]->SM_ASM[R519]->SM_SM[R517]->SM_EVT[R502] where ( selected.Drv_Lbl == evt_label );
  end if;
  if ( not_empty sm_evt )
    //
    // We are not allowing prioritized polymorphic events... yet.
    //
    select one sm_pevt related by sm_evt->SM_PEVT[R525];
    if ( not_empty sm_pevt )
      msg = "ERROR:  Prioritized Polymorphic Event (${evt_label}) component ${te_c.Name}";
      msg = msg + "\nPriority Polys are not supported.";
    end if;
    select one te_evt related by sm_evt->TE_EVT[R2036];
    te_evt.Priority = priority_value;
    msg = "Event ${sm_evt.Drv_Lbl}:${sm_evt.Mning} marked as priority event.";
  else
    msg = "ERROR:  Event (${evt_label}) not found in component ${te_c.Name}";
  end if;
  msg = msg + " => TagPriorityEvent( ${evt_label}, $t{priority_value} )";
  T::print(s:"${msg}");
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("8cb603d0-db01-4bc6-af80-2c2fe6e3beb4",
	"e3ee1c03-b339-4ddf-bf8f-6aef3d16c14f",
	'component_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("2280784b-b92b-40d1-913a-df0e5d6c6c79",
	"e3ee1c03-b339-4ddf-bf8f-6aef3d16c14f",
	'evt_label',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"8cb603d0-db01-4bc6-af80-2c2fe6e3beb4",
	'');
INSERT INTO S_SPARM
	VALUES ("cab8c8ef-6ea3-4643-a623-9487977ef0ba",
	"e3ee1c03-b339-4ddf-bf8f-6aef3d16c14f",
	'priority_value',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"2280784b-b92b-40d1-913a-df0e5d6c6c79",
	'');
INSERT INTO PE_PE
	VALUES ("e3ee1c03-b339-4ddf-bf8f-6aef3d16c14f",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("177fa4aa-f845-49f8-bced-c4f9f9d9cb67",
	"00000000-0000-0000-0000-000000000000",
	'EnableTasking',
	'',
	'//============================================================================
// $RCSfile: m.system.arc,v $
//
// Description:
// System level coloring functions are found here.
// Notice that the colors that would normally update TE_SYS are active.
//============================================================================
//
//
//============================================================================
// Enable tasking/threading.
//============================================================================
flavor = param.flavor;
serialize = param.serialize;
number_of_threads = param.number_of_threads;
//
T::print(s:"EnableTasking( ${flavor}, ${serialize}, $t{number_of_threads} )");
select any tm_thread from instances of TM_THREAD;
if ( empty tm_thread )
  create object instance tm_thread of TM_THREAD;
  tm_thread.extra_initialization = "";
end if;
tm_thread.number_of_threads = number_of_threads;
if ( T::l(s:serialize) == "serialize" )
  tm_thread.serialize = true;
else
  tm_thread.serialize = false;
end if;
if ( ( ( ( "Nucleus" == flavor ) or ( "POSIX" == flavor ) ) or ( ( "OSX" == flavor ) or ( "Windows" == flavor ) ) ) or ( ( "AUTOSAR" == flavor ) or ( "SystemC" == flavor ) ) )
  tm_thread.flavor = flavor;
  if ( "SystemC" == flavor )
    // SystemC uses a single thread inside each component.
    // So, no need for an array of threads.
    tm_thread.number_of_threads = 1;
    tm_thread.enabled = false;
  else
    tm_thread.enabled = true;
  end if;
else
  T::print(s:"ERROR:  system.mark:EnableTasking has incorrect tasking/threading type:${flavor}.\n");
  T::exit(i:100);
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("33810456-7c19-4c37-beac-47e7a3905890",
	"177fa4aa-f845-49f8-bced-c4f9f9d9cb67",
	'flavor',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("7ae18a20-7aae-4cee-ae1f-e93368781030",
	"177fa4aa-f845-49f8-bced-c4f9f9d9cb67",
	'serialize',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"33810456-7c19-4c37-beac-47e7a3905890",
	'');
INSERT INTO S_SPARM
	VALUES ("2f9cf3d5-bd94-4a23-aa27-b033d50c605a",
	"177fa4aa-f845-49f8-bced-c4f9f9d9cb67",
	'number_of_threads',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"7ae18a20-7aae-4cee-ae1f-e93368781030",
	'');
INSERT INTO PE_PE
	VALUES ("177fa4aa-f845-49f8-bced-c4f9f9d9cb67",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("89fda768-687d-4018-88b3-dd6393a8d7e8",
	"00000000-0000-0000-0000-000000000000",
	'SetTaskPriority',
	'',
	'//
//============================================================================
// Establish task priority.
//============================================================================
task_number = param.task_number;
priority = param.priority;
T::print(s:"SetTaskPriority( $t{task_number}, ${priority} )");
select any tm_thread from instances of TM_THREAD;
if ( empty tm_thread )
  create object instance tm_thread of TM_THREAD;
end if;
tm_thread.extra_initialization = tm_thread.extra_initialization + "  xtUML_task_priorities[ $t{task_number} ] = ${priority};\n";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("ecd01cd1-de2c-40f0-8e89-a90d8bb30d0b",
	"89fda768-687d-4018-88b3-dd6393a8d7e8",
	'task_number',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("9c8d6a3f-0f06-46bc-813e-ebdb0dc78a89",
	"89fda768-687d-4018-88b3-dd6393a8d7e8",
	'priority',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ecd01cd1-de2c-40f0-8e89-a90d8bb30d0b",
	'');
INSERT INTO PE_PE
	VALUES ("89fda768-687d-4018-88b3-dd6393a8d7e8",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5274060e-d6d8-4d09-b89f-11bd8dab878c",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumStringLength',
	'',
	'//
//============================================================================
max_len = param.max_len;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxStringLen = max_len;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("4d60f6b1-ed0f-4fda-8367-3569a2473291",
	"5274060e-d6d8-4d09-b89f-11bd8dab878c",
	'max_len',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("5274060e-d6d8-4d09-b89f-11bd8dab878c",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9815c99a-4eab-4143-ae8d-a1f58c6a1893",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumRelationshipExtentSize',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxRelExtent = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("791eb677-d424-4b05-b0ba-ad64f14a0ad4",
	"9815c99a-4eab-4143-ae8d-a1f58c6a1893",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("9815c99a-4eab-4143-ae8d-a1f58c6a1893",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7aae8923-0511-4736-bb17-5a251fe1b2d0",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumSelectionExtentSize',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxSelectExtent = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("55529ab4-dfdc-40b6-a182-aceca8196089",
	"7aae8923-0511-4736-bb17-5a251fe1b2d0",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("7aae8923-0511-4736-bb17-5a251fe1b2d0",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5da3e43f-7e25-4984-9360-b6e44bba1d3c",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumSelfDirectedEvents',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxSelfEvents = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("aa56aa21-d0b0-45dd-84f3-1a6875d44669",
	"5da3e43f-7e25-4984-9360-b6e44bba1d3c",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("5da3e43f-7e25-4984-9360-b6e44bba1d3c",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b6d0a8ed-9400-473a-99d3-8575a99a5a85",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumNonSelfDirectedEvents',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxNonSelfEvents = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("cf9ea685-6f1b-490c-a3d5-1fa14db47f4c",
	"b6d0a8ed-9400-473a-99d3-8575a99a5a85",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("b6d0a8ed-9400-473a-99d3-8575a99a5a85",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("73850209-42cd-49f3-89d5-bbc069e8b0be",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumPendingOoaTimers',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxTimers = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("01577678-c923-4f24-b148-05cbb4e294b4",
	"73850209-42cd-49f3-89d5-bbc069e8b0be",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("73850209-42cd-49f3-89d5-bbc069e8b0be",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7fa31dfe-e884-4ac8-9f7d-52b1030d67ed",
	"00000000-0000-0000-0000-000000000000",
	'TagMaximumInterleavedBridges',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxInterleavedBridges = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("fc13c903-00f8-47e3-81c3-e993088b987c",
	"7fa31dfe-e884-4ac8-9f7d-52b1030d67ed",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("7fa31dfe-e884-4ac8-9f7d-52b1030d67ed",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("cb9f1aec-c414-4337-bb4d-99d0826bdcb3",
	"00000000-0000-0000-0000-000000000000",
	'TagInterleavedBridgeDataSize',
	'',
	'//
//============================================================================
user_specified_size = param.user_specified_size;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.MaxInterleavedBridgeDataSize = user_specified_size;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("5c38de7c-f97f-4f76-9266-b4eb779bccad",
	"cb9f1aec-c414-4337-bb4d-99d0826bdcb3",
	'user_specified_size',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("cb9f1aec-c414-4337-bb4d-99d0826bdcb3",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a082088c-9e69-4aaa-8065-2fc5ba3ca7a8",
	"00000000-0000-0000-0000-000000000000",
	'TagCollectionsFlavor',
	'',
	'//
//============================================================================
// Use doubly linked lists for collections.  This speeds up deletes.
//============================================================================
collections_flavor = param.collections_flavor;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.CollectionsFlavor = collections_flavor;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("82f57475-9619-4a71-8876-a3f8757c60a1",
	"a082088c-9e69-4aaa-8065-2fc5ba3ca7a8",
	'collections_flavor',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("a082088c-9e69-4aaa-8065-2fc5ba3ca7a8",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f4ab08bf-0f99-4f2e-8a55-4a30dfaaabe1",
	"00000000-0000-0000-0000-000000000000",
	'MarkPersistenceCacheDepth',
	'',
	'//
//============================================================================
// Mark Depth of Persistence Cache Queue
//
// This color is used to specify the maximum number of instances and
// links that can be queued waiting to be flushed to non-volatile
// storage (NVS).  As instances and links become "dirty" they get
// queued to NVS.  When Persist::Commit is called this queue is flushed.
//
// MarkPersistenceCacheDepth( instance_depth, link_depth )
//
// Where the input parameter(s) are:
//   instance_depth = the integer depth of the linked list of instances
//   link_depth = the integer depth of the linked list of persistent links
//============================================================================
instance_depth = param.instance_depth;
link_depth = param.link_depth;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.PersistInstanceCacheDepth = instance_depth;
tm_systag.PersistLinkCacheDepth = link_depth;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("75e2c67a-5012-4365-b4d1-238865fb0651",
	"f4ab08bf-0f99-4f2e-8a55-4a30dfaaabe1",
	'instance_depth',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("8983b669-7ceb-43ab-8495-5163812edd1a",
	"f4ab08bf-0f99-4f2e-8a55-4a30dfaaabe1",
	'link_depth',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"75e2c67a-5012-4365-b4d1-238865fb0651",
	'');
INSERT INTO PE_PE
	VALUES ("f4ab08bf-0f99-4f2e-8a55-4a30dfaaabe1",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7d25adb0-d086-4c6a-a464-86052a353a0f",
	"00000000-0000-0000-0000-000000000000",
	'TagDynamicMemoryAllocationOn',
	'',
	'//
//============================================================================
units_to_allocate = param.units_to_allocate;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.UnitsToDynamicallyAllocate = units_to_allocate;
if ( tm_systag.UnitsToDynamicallyAllocate < 1 )
  tm_systag.UnitsToDynamicallyAllocate = 1;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("1d390c4f-7584-4bb6-b45d-37de23df7676",
	"7d25adb0-d086-4c6a-a464-86052a353a0f",
	'units_to_allocate',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("7d25adb0-d086-4c6a-a464-86052a353a0f",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("eba41506-cec9-4013-91b0-a1f60feef20a",
	"00000000-0000-0000-0000-000000000000",
	'TagInstanceLoading',
	'',
	'//
//============================================================================
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.InstanceLoading = true;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("eba41506-cec9-4013-91b0-a1f60feef20a",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("85fbbc3f-a421-4562-9340-5a553dccd37f",
	"00000000-0000-0000-0000-000000000000",
	'VFBEnable',
	'',
	'//
//============================================================================
// Enable Virtual Function Bus (VFB) for AUTOSAR.
//============================================================================
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.VFB = true;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("85fbbc3f-a421-4562-9340-5a553dccd37f",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("356d9a10-03c3-4dc9-84b8-03b08ef815ed",
	"00000000-0000-0000-0000-000000000000",
	'MarkStructuredMessaging',
	'',
	'//
//============================================================================
// Turn on structured inter-component message passing.
//============================================================================
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.StructuredMessaging = true;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("356d9a10-03c3-4dc9-84b8-03b08ef815ed",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("098bd039-3f42-49c4-bb63-cbf2e9b4e7ed",
	"00000000-0000-0000-0000-000000000000",
	'MarkNetworkSockets',
	'',
	'//
//============================================================================
// Use Network Sockets to send messages between components.
//============================================================================
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.NetworkSockets = true;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("098bd039-3f42-49c4-bb63-cbf2e9b4e7ed",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("eb301332-2782-403c-a62a-e02081301c9c",
	"00000000-0000-0000-0000-000000000000",
	'MarkSimulatedTime',
	'',
	'//
//============================================================================
// Use simulated time instead of wall clock time.
//============================================================================
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.SimulatedTime = true;
T::print(s:"MarkSimulatedTime:  Time marked to be simulated (rather than wall clock).");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("eb301332-2782-403c-a62a-e02081301c9c",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f8e11054-4e31-4f26-a2c2-33f71dc814bf",
	"00000000-0000-0000-0000-000000000000",
	'MarkStateSave',
	'',
	'//
//============================================================================
// Set the state save buffer depth.
//============================================================================
buffersize = param.buffersize;
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.StateSaveBufferSize = buffersize;
T::print(s:"MarkStateSave:  buffer size set to $t{buffersize}.");
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("13122833-4135-4516-951d-9d8150e757a7",
	"f8e11054-4e31-4f26-a2c2-33f71dc814bf",
	'buffersize',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("f8e11054-4e31-4f26-a2c2-33f71dc814bf",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b75da582-3eb1-446b-a591-bd2a19b0ce37",
	"00000000-0000-0000-0000-000000000000",
	'TM_SYSTAG_select',
	'',
	'//
select any tm_systag from instances of TM_SYSTAG;
if ( empty tm_systag )
  create object instance tm_systag of TM_SYSTAG;
  tm_systag.MaxStringLen = 32;
  tm_systag.PersistInstanceCacheDepth = 128;
  tm_systag.PersistLinkCacheDepth = 128;
  tm_systag.SystemCPortsType = "sc_interface";
end if;
return tm_systag;
',
	"fef0b916-06a3-4b79-bfcf-25214d2c2670",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("b75da582-3eb1-446b-a591-bd2a19b0ce37",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_DT_PROXY
	VALUES ("fef0b916-06a3-4b79-bfcf-25214d2c2670",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<System Tags>',
	'',
	'',
	'../../../../../mcooa/models/mcooa/extensions/Translation Marking/Translation Marking.xtuml');
INSERT INTO S_SYNC
	VALUES ("4a54193e-5285-48fe-8f72-fe6a54d7253a",
	"00000000-0000-0000-0000-000000000000",
	'MarkSystemConfigurationPackage',
	'',
	'//
//============================================================================
// Mark a package as containing the system configuration.  Code will be
// generated for components contained in this package (and referred to
// from this package).
//============================================================================
package_name = param.package_name;
select any tm_build from instances of TM_BUILD;
if ( empty tm_build )
  create object instance tm_build of TM_BUILD;
else
  T::print(s:"Warning:  Re-marking system configuration.  Last configuration marked will be built.");
end if;
tm_build.package_to_build = package_name;
tm_build.package_obj_name = package_name + "_sys";
tm_build.package_inst_name = package_name + "_top";
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("670df2cc-a33e-4f5c-929f-217ca1b54232",
	"4a54193e-5285-48fe-8f72-fe6a54d7253a",
	'package_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("4a54193e-5285-48fe-8f72-fe6a54d7253a",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a1cb2c2d-cf5f-402f-a566-215ebab009d4",
	"00000000-0000-0000-0000-000000000000",
	'MarkSystemCPortType',
	'',
	'//
//============================================================================
// Enable Channel binding instead of Signal Binding.
//============================================================================
port_type = param.port_type;
r = ::TM_SYSTAG_select();
tm_systag = r;
if ( ( ( port_type == "TLM" ) or ( port_type == "BitLevelSignals" ) ) or ( port_type == "sc_interface" ) )
  tm_systag.SystemCPortsType = port_type;
else
  T::print(s:"Warning:  Unrecognized SystemC Port Type(${port_type}). Please choose either TLM, BitLevelSignals or sc_interface. Default configuration will be used.");
  tm_systag.SystemCPortsType = "sc_interface";
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("33b72cb7-40cd-4365-b085-42920d55af7a",
	"a1cb2c2d-cf5f-402f-a566-215ebab009d4",
	'port_type',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("a1cb2c2d-cf5f-402f-a566-215ebab009d4",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f2b94281-b78b-4495-b367-1fb24b4226ee",
	"00000000-0000-0000-0000-000000000000",
	'MarkAllPortsPolymorphic',
	'',
	'//
//============================================================================
// Force all ports to be polymorphic (where a component implements the same 
// interface going in the same direction more than once). 
//============================================================================
r = ::TM_SYSTAG_select();
tm_systag = r;
tm_systag.AllPortsPoly = true;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("f2b94281-b78b-4495-b367-1fb24b4226ee",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9a4b785a-65f5-4cb7-af20-27292ecd7263",
	"00000000-0000-0000-0000-000000000000",
	'mark_all',
	'',
	'//
pass = param.pass;
f = param.f;
p1 = param.p1;
p2 = param.p2;
p3 = param.p3;
p4 = param.p4;
p5 = param.p5;
if ( "1" == pass )
  // bridge
  if ( "WireSynchServiceOoaBridge" == f )
    // WireSynchServiceOoaBridge("initiant","ee_key_letters","recipient")
    ::WireSynchServiceOoaBridge( initiant:p1, ee_key_letters:p2, recipient:p3 );
  elif ( "WireRealizeExternalEntity" == f )
    // WireRealizeExternalEntity("a","b","c","d","e")
    ::WireRealizeExternalEntity( a:p1, b:p2, c:p3, d:p4, e:p5 );
  elif ( "WireRealizedExternalEntity" == f )
    // WireRealizedExternalEntity("a","b","c","d","e")
    ::WireRealizedExternalEntity( a:p1, b:p2, c:p3, d:p4, e:p5 );
  elif ( "TagSyncServiceSafeForInterrupts" == f )
    // TagSyncServiceSafeForInterrupts("component_name","function_name")
    ::TagSyncServiceSafeForInterrupts( component_name:p1, function_name:p2 );
  elif ( "MarkMessageSafeForInterrupts" == f )
    // MarkMessageSafeForInterrupts("component_name","port_name","message_name")
    ::MarkMessageSafeForInterrupts( component_name:p1, port_name:p2, message_name:p3 );
    // datatype
  elif ( "TagDataTypePrecision" == f )
    // TagDataTypePrecision("component_name","dt_name","tagged_name","initial_value")
    ::TagDataTypePrecision( component_name:p1, dt_name:p2, tagged_name:p3, initial_value:p4 );
  elif ( "MapDataTypeAsPointer" == f )
    // MapDataTypeAsPointer("component_name","dt_name","pointer_type","include_file")
    ::MapDataTypeAsPointer( component_name:p1, dt_name:p2, pointer_type:p3, include_file:p4 );
  elif ( "TagEnumeratorDiscreteValue" == f )
    // TagEnumeratorDiscreteValue("component_name","enumeration","enumerator","value")
    ::TagEnumeratorDiscreteValue( component_name:p1, enumeration:p2, enumerator:p3, value:p4 );
  elif ( "TagUninitializedEnumerationValue" == f )
    // TagUninitializedEnumerationValue("component_name","enumeration","value")
    ::TagUninitializedEnumerationValue( component_name:p1, enumeration:p2, value:p3 );
  elif ( "AssignDirectToUDTPackage" == f )
    // AssignDirectToUDTPackage("package_name")
    ::AssignDirectToUDTPackage( package_name:p1 );
    // system
  elif ( "EnableTasking" == f )
    // EnableTasking("flavor","serialize","number_of_threads":integer)
    r = ::T_atoi( s:p3 );
    i3 = r;
    ::EnableTasking( flavor:p1, serialize:p2, number_of_threads:i3 );
  elif ( "SetTaskPriority" == f )
    // SetTaskPriority("task_number":integer"priority")
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::SetTaskPriority( task_number:i1, priority:p2 );
  elif ( "TagMaximumStringLength" == f )
    // TagMaximumStringLength("max_len":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumStringLength( max_len:i1 );
  elif ( "TagMaximumRelationshipExtentSize" == f )
    // TagMaximumRelationshipExtentSize("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumRelationshipExtentSize( user_specified_size:i1 );
  elif ( "TagMaximumSelectionExtentSize" == f )
    // TagMaximumSelectionExtentSize("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumSelectionExtentSize( user_specified_size:i1 );
  elif ( "TagMaximumSelfDirectedEvents" == f )
    // TagMaximumSelfDirectedEvents("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumSelfDirectedEvents( user_specified_size:i1 );
  elif ( "TagMaximumNonSelfDirectedEvents" == f )
    // TagMaximumNonSelfDirectedEvents("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumNonSelfDirectedEvents( user_specified_size:i1 );
  elif ( "TagMaximumPendingOoaTimers" == f )
    // TagMaximumPendingOoaTimers("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumPendingOoaTimers( user_specified_size:i1 );
  elif ( "TagMaximumInterleavedBridges" == f )
    // TagMaximumInterleavedBridges("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagMaximumInterleavedBridges( user_specified_size:i1 );
  elif ( "TagInterleavedBridgeDataSize" == f )
    // TagInterleavedBridgeDataSize("user_specified_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagInterleavedBridgeDataSize( user_specified_size:i1 );
  elif ( "TagCollectionsFlavor" == f )
    // TagCollectionsFlavor("collections_flavor":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagCollectionsFlavor( collections_flavor:i1 );
  elif ( "MarkPersistenceCacheDepth" == f )
    // MarkPersistenceCacheDepth("instance_depth":integer"link_depth":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    r = ::T_atoi( s:p2 );
    i2 = r;
    ::MarkPersistenceCacheDepth( instance_depth:i1, link_depth:i2 );
  elif ( "TagDynamicMemoryAllocationOn" == f )
    // TagDynamicMemoryAllocationOn("units_to_allocate":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagDynamicMemoryAllocationOn( units_to_allocate:i1 );
  elif ( "TagInstanceLoading" == f )
    ::TagInstanceLoading();
  elif ( "VFBEnable" == f )
    ::VFBEnable();
  elif ( "MarkStructuredMessaging" == f )
    ::MarkStructuredMessaging();
  elif ( "MarkNetworkSockets" == f )
    ::MarkNetworkSockets();
  elif ( "MarkSimulatedTime" == f )
    ::MarkSimulatedTime();
  elif ( "MarkStateSave" == f )
    // MarkStateSave("buffersize":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::MarkStateSave( buffersize:i1 );
  elif ( "MarkSystemConfigurationPackage" == f )
    // MarkSystemConfigurationPackage("package_name")
    ::MarkSystemConfigurationPackage( package_name:p1 );
  elif ( "MarkSystemCPortType" == f )
    // MarkSystemCPortType("port_type")
    ::MarkSystemCPortType( port_type:p1 );
  elif ( "MarkAllPortsPolymorphic" == f )
    ::MarkAllPortsPolymorphic();
    // component
  elif ( "MarkAsChannel" == f )
    // MarkAsChannel("package_name","component_name","inc_file")
    ::MarkAsChannel( package_name:p1, component_name:p2, inc_file:p3 );
  elif ( "MarkComponentAsChannel" == f )
    // MarkComponentAsChannel("package_name","component_name","inc_file")
    ::MarkComponentAsChannel( package_name:p1, component_name:p2, inc_file:p3 );
  elif ( "MarkComponentWithTemplate" == f )
    // MarkComponentWithTemplate("package_name","component_name")
    ::MarkComponentWithTemplate( package_name:p1, component_name:p2 );
  elif ( "MarkInterfaceWithTemplate" == f )
    // MarkInterfaceWithTemplate("package_name","interface_name")
    ::MarkInterfaceWithTemplate( package_name:p1, interface_name:p2 );
  elif ( "AddTemplateParameter" == f )
    // AddTemplateParameter("package_name","component_name","type_name","variable_name","default_value")
    ::AddTemplateParameter( package_name:p1, component_name:p2, type_name:p3, variable_name:p4, default_value:p5 );
  elif ( "SetTemplateParameter" == f )
    // SetTemplateParameter("package_name","instance","variable_name","value")
    ::SetTemplateParameter( package_name:p1, instance:p2, variable_name:p3, value:p4 );
  elif ( "SetTPV" == f )
    // CDS - not supported here
    // SetTPV("package_name","parent_component","component","classifier_name","port","variable_name","value")
    ::SetTPV( package_name:p1, parent_component:p2, component:p3, classifier_name:p4, port:p5, variable_name:"", value:"" );
  elif ( "MarkInterfacePrefix" == f )
    // MarkInterfacePrefix("provided_port","required_port","channel")
    ::MarkInterfacePrefix( provided_port:p1, required_port:p2, channel:p3 );
  elif ( "MarkComponentAsRealized" == f )
    // MarkComponentAsRealized("package_name","component_name","inc_file")
    ::MarkComponentAsRealized( package_name:p1, component_name:p2, inc_file:p3 );
  else
    // not in this pass
  end if;
else
  // class
  if ( "TagSystemObjectDefaultExtentSize" == f )
    // TagSystemObjectDefaultExtentSize("extent_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagSystemObjectDefaultExtentSize( extent_size:i1 );
  elif ( "MarkSystemObjectDefaultExtentSize" == f )
    // MarkSystemObjectDefaultExtentSize("extent_size":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::MarkSystemObjectDefaultExtentSize( extent_size:i1 );
  elif ( "TagObjectExtentSize" == f )
    // TagObjectExtentSize("obj_key_letters","extent_size":integer)
    r = ::T_atoi( s:p2 );
    i2 = r;
    ::TagObjectExtentSize( obj_key_letters:p1, extent_size:i2 );
  elif ( "MarkObjectExtentSize" == f )
    // MarkObjectExtentSize("component_name","obj_key_letters","extent_size":integer)
    r = ::T_atoi( s:p3 );
    i3 = r;
    ::MarkObjectExtentSize( component_name:p1, obj_key_letters:p2, extent_size:i3 );
  elif ( "TagTransformerGeneration" == f )
    // TagTransformerGeneration("obj_key_letters","transformer_name")
    ::TagTransformerGeneration( obj_key_letters:p1, transformer_name:p2 );
  elif ( "TagClassOperationTranslationOff" == f )
    // TagClassOperationTranslationOff("obj_key_letters","op_name")
    ::TagClassOperationTranslationOff( obj_key_letters:p1, op_name:p2 );
  elif ( "MarkClassOperationTranslationOff" == f )
    // MarkClassOperationTranslationOff("component_name","obj_key_letters","op_name")
    ::MarkClassOperationTranslationOff( component_name:p1, obj_key_letters:p2, op_name:p3 );
  elif ( "MarkClassTraceOff" == f )
    // MarkClassTraceOff("component_name","obj_key_letters")
    ::MarkClassTraceOff( component_name:p1, obj_key_letters:p2 );
  elif ( "MarkClassTraceOn" == f )
    // MarkClassTraceOn("component_name","obj_key_letters")
    ::MarkClassTraceOn( component_name:p1, obj_key_letters:p2 );
  elif ( "TagPEIsDefinedInData" == f )
    // TagPEIsDefinedInData("ss_prefix","obj_key_letters")
    ::TagPEIsDefinedInData( ss_prefix:p1, obj_key_letters:p2 );
  elif ( "MarkPEIsDefinedInData" == f )
    // MarkPEIsDefinedInData("component_name","ss_prefix","obj_key_letters")
    ::MarkPEIsDefinedInData( component_name:p1, package_name:p2, obj_key_letters:p3 );
  elif ( "TagStaticInstancePopulation" == f )
    // TagStaticInstancePopulation("ss_prefix","obj_key_letters")
    ::TagStaticInstancePopulation( ss_prefix:p1, obj_key_letters:p2 );
  elif ( "MarkStaticInstancePopulation" == f )
    // MarkStaticInstancePopulation("component_name","ss_prefix","obj_key_letters")
    ::MarkStaticInstancePopulation( component_name:p1, package_name:p2, obj_key_letters:p3 );
  elif ( "TagReadOnly" == f )
    // TagReadOnly("ss_prefix","obj_key_letters")
    ::TagReadOnly( ss_prefix:p1, obj_key_letters:p2 );
  elif ( "MarkReadOnly" == f )
    // MarkReadOnly("component_name","ss_prefix","obj_key_letters")
    ::MarkReadOnly( component_name:p1, package_name:p2, obj_key_letters:p3 );
  elif ( "TagPersistentClass" == f )
    // TagPersistentClass("ss_prefix","obj_key_letters")
    ::TagPersistentClass( ss_prefix:p1, obj_key_letters:p2 );
  elif ( "MarkPersistentClass" == f )
    // MarkPersistentClass("component_name","ss_prefix","obj_key_letters")
    ::MarkPersistentClass( component_name:p1, package_name:p2, obj_key_letters:p3 );
  elif ( "TagNonPersistentClass" == f )
    // TagNonPersistentClass("ss_prefix","obj_key_letters")
    ::TagNonPersistentClass( ss_prefix:p1, obj_key_letters:p2 );
  elif ( "MarkNonPersistentClass" == f )
    // MarkNonPersistentClass("component_name","ss_prefix","obj_key_letters")
    ::MarkNonPersistentClass( component_name:p1, package_name:p2, obj_key_letters:p3 );
  elif ( "MapClassToTask" == f )
    // MapClassToTask("ss_prefix","obj_key_letters","task":integer)
    r = ::T_atoi( s:p3 );
    i3 = r;
    ::MapClassToTask( ss_prefix:p1, obj_key_letters:p2, task:i3 );
  elif ( "MarkClassToTask" == f )
    // MarkClassToTask("component_name","ss_prefix","obj_key_letters","task":integer)
    r = ::T_atoi( s:p4 );
    i4 = r;
    ::MarkClassToTask( component_name:p1, package_name:p2, obj_key_letters:p3, task:i4 );
    // domain
  elif ( "TagFunctionTranslationOff" == f )
    // TagFunctionTranslationOff("function_name")
    ::TagFunctionTranslationOff( function_name:p1 );
  elif ( "MarkFunctionTranslationOff" == f )
    // MarkFunctionTranslationOff("component_name","function_name")
    ::MarkFunctionTranslationOff( component_name:p1, function_name:p2 );
  elif ( "TagInitializationFunction" == f )
    // TagInitializationFunction("function_name")
    ::TagInitializationFunction( function_name:p1 );
  elif ( "MarkInitializationFunction" == f )
    // MarkInitializationFunction("component_name","function_name")
    ::MarkInitializationFunction( component_name:p1, function_name:p2 );
  elif ( "TagExcludeObjectFromCodeGen" == f )
    // TagExcludeObjectFromCodeGen("obj_key_letters")
    ::TagExcludeObjectFromCodeGen( obj_key_letters:p1 );
  elif ( "MarkExcludeObjectFromCodeGen" == f )
    // MarkExcludeObjectFromCodeGen("component_name","obj_key_letters")
    ::MarkExcludeObjectFromCodeGen( component_name:p1, obj_key_letters:p2 );
  elif ( "TagExcludeSubsystemFromCodeGen" == f )
    // TagExcludeSubsystemFromCodeGen("subsystem_name")
    ::TagExcludeSubsystemFromCodeGen( subsystem_name:p1 );
  elif ( "MarkExcludeSubsystemFromCodeGen" == f )
    // MarkExcludeSubsystemFromCodeGen("component_name","subsystem_name")
    ::MarkExcludeSubsystemFromCodeGen( component_name:p1, package_name:p2 );
  elif ( "TagStateTransitionTracingOn" == f )
    ::TagStateTransitionTracingOn();
  elif ( "MarkStateTransitionTracingOn" == f )
    // MarkStateTransitionTracingOn("component_name")
    ::MarkStateTransitionTracingOn( component_name:p1 );
  elif ( "TagActionStatementTracingOn" == f )
    ::TagActionStatementTracingOn();
  elif ( "MarkActionStatementTracingOn" == f )
    // MarkActionStatementTracingOn("component_name")
    ::MarkActionStatementTracingOn( component_name:p1 );
  elif ( "MarkMessageTracingOn" == f )
    // MarkMessageTracingOn("component_name","port_name","message_name")
    ::MarkMessageTracingOn( component_name:p1, port_name:p2, message_name:p3 );
  elif ( "TagEmptyHandleDetectionOn" == f )
    ::TagEmptyHandleDetectionOn();
  elif ( "MarkEmptyHandleDetectionOn" == f )
    // MarkEmptyHandleDetectionOn("component_name")
    ::MarkEmptyHandleDetectionOn( component_name:p1 );
  elif ( "TagFirstPassOptimizationsOff" == f )
    ::TagFirstPassOptimizationsOff();
  elif ( "MarkFirstPassOptimizationsOff" == f )
    // MarkFirstPassOptimizationsOff("component_name")
    ::MarkFirstPassOptimizationsOff( component_name:p1 );
  elif ( "TagStateActionCommentBlocksEnabled" == f )
    ::TagStateActionCommentBlocksEnabled();
  elif ( "MarkStateActionCommentBlocksEnabled" == f )
    // MarkStateActionCommentBlocksEnabled("component_name")
    ::MarkStateActionCommentBlocksEnabled( component_name:p1 );
  elif ( "TagStateActionStatementCommentsDisabled" == f )
    ::TagStateActionStatementCommentsDisabled();
  elif ( "MarkStateActionStatementCommentsDisabled" == f )
    // MarkStateActionStatementCommentsDisabled("component_name")
    ::MarkStateActionStatementCommentsDisabled( component_name:p1 );
  elif ( "TagStateActionVariableNamesEnabled" == f )
    ::TagStateActionVariableNamesEnabled();
  elif ( "TagVerboseReflexivePhrasesEnabled" == f )
    ::TagVerboseReflexivePhrasesEnabled();
  elif ( "MarkPortWiring" == f )
    // MarkPortWiring("home_component","home_port","foreign_component","foreign_port")
    ::MarkPortWiring( home_component:p1, home_port:p2, foreign_component:p3, foreign_port:p4 );
  elif ( "TagDispatchFlavor" == f )
    // TagDispatchFlavor("flavor":integer)
    r = ::T_atoi( s:p1 );
    i1 = r;
    ::TagDispatchFlavor( flavor:i1 );
    // event
  elif ( "TagPriorityEvent" == f )
    // TagPriorityEvent("evt_label","priority_value":integer)
    r = ::T_atoi( s:p2 );
    i2 = r;
    ::TagPriorityEvent( evt_label:p1, priority_value:i2 );
  elif ( "MarkPriorityEvent" == f )
    // MarkPriorityEvent("component_name","evt_label","priority_value":integer)
    r = ::T_atoi( s:p3 );
    i3 = r;
    ::MarkPriorityEvent( component_name:p1, evt_label:p2, priority_value:i3 );
  else
    // not in this pass
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("1e104300-e348-47c4-82f0-4247a26e28e2",
	"9a4b785a-65f5-4cb7-af20-27292ecd7263",
	'pass',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("5b1a68dd-3796-462e-9482-6dd1cc10a7fe",
	"9a4b785a-65f5-4cb7-af20-27292ecd7263",
	'f',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"1e104300-e348-47c4-82f0-4247a26e28e2",
	'');
INSERT INTO S_SPARM
	VALUES ("d2e0f9ad-4c84-4128-accc-170c63bcf77b",
	"9a4b785a-65f5-4cb7-af20-27292ecd7263",
	'p1',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"5b1a68dd-3796-462e-9482-6dd1cc10a7fe",
	'');
INSERT INTO S_SPARM
	VALUES ("2c9ab89d-11b1-45a6-aec8-b7d34e677e59",
	"9a4b785a-65f5-4cb7-af20-27292ecd7263",
	'p2',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"d2e0f9ad-4c84-4128-accc-170c63bcf77b",
	'');
INSERT INTO S_SPARM
	VALUES ("17d78c97-4ed0-4419-925d-fdfa1a4de4a3",
	"9a4b785a-65f5-4cb7-af20-27292ecd7263",
	'p3',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"2c9ab89d-11b1-45a6-aec8-b7d34e677e59",
	'');
INSERT INTO S_SPARM
	VALUES ("819c798d-1510-4559-b516-15d475979d75",
	"9a4b785a-65f5-4cb7-af20-27292ecd7263",
	'p4',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"17d78c97-4ed0-4419-925d-fdfa1a4de4a3",
	'');
INSERT INTO S_SPARM
	VALUES ("6721a864-8bf2-4f72-877a-b097a9f885be",
	"9a4b785a-65f5-4cb7-af20-27292ecd7263",
	'p5',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"819c798d-1510-4559-b516-15d475979d75",
	'');
INSERT INTO PE_PE
	VALUES ("9a4b785a-65f5-4cb7-af20-27292ecd7263",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("fc76cc1a-7c14-405f-a85c-b9a000adb73c",
	"00000000-0000-0000-0000-000000000000",
	'T_atoi',
	'',
	'//
return 0;
::oal( s:"return strtol( p_s, 0, 10 );" );
',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("dc83700c-f871-4ecf-8a0b-36ec75586c25",
	"fc76cc1a-7c14-405f-a85c-b9a000adb73c",
	's',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("fc76cc1a-7c14-405f-a85c-b9a000adb73c",
	1,
	"27b1810b-e74a-49f0-859b-32fc1c54965f",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("27b1810b-e74a-49f0-859b-32fc1c54965f",
	1,
	"f76021f0-a257-44e3-a11e-4104b91c38ec",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG_PROXY
	VALUES ("f76021f0-a257-44e3-a11e-4104b91c38ec",
	"d9bc5487-4193-4817-be1c-6c3f3339aebf",
	"d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'mcmc',
	'',
	0,
	'../mcmc.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'escher',
	1,
	'../../escher.xtuml');
